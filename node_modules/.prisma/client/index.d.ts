
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Foyer
 * 
 */
export type Foyer = $Result.DefaultSelection<Prisma.$FoyerPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model CalendarEvent
 * 
 */
export type CalendarEvent = $Result.DefaultSelection<Prisma.$CalendarEventPayload>
/**
 * Model ShoppingItem
 * 
 */
export type ShoppingItem = $Result.DefaultSelection<Prisma.$ShoppingItemPayload>
/**
 * Model TravelIdea
 * 
 */
export type TravelIdea = $Result.DefaultSelection<Prisma.$TravelIdeaPayload>
/**
 * Model Recipe
 * 
 */
export type Recipe = $Result.DefaultSelection<Prisma.$RecipePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Foyers
 * const foyers = await prisma.foyer.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Foyers
   * const foyers = await prisma.foyer.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.foyer`: Exposes CRUD operations for the **Foyer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Foyers
    * const foyers = await prisma.foyer.findMany()
    * ```
    */
  get foyer(): Prisma.FoyerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calendarEvent`: Exposes CRUD operations for the **CalendarEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalendarEvents
    * const calendarEvents = await prisma.calendarEvent.findMany()
    * ```
    */
  get calendarEvent(): Prisma.CalendarEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shoppingItem`: Exposes CRUD operations for the **ShoppingItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShoppingItems
    * const shoppingItems = await prisma.shoppingItem.findMany()
    * ```
    */
  get shoppingItem(): Prisma.ShoppingItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.travelIdea`: Exposes CRUD operations for the **TravelIdea** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TravelIdeas
    * const travelIdeas = await prisma.travelIdea.findMany()
    * ```
    */
  get travelIdea(): Prisma.TravelIdeaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Foyer: 'Foyer',
    User: 'User',
    Task: 'Task',
    CalendarEvent: 'CalendarEvent',
    ShoppingItem: 'ShoppingItem',
    TravelIdea: 'TravelIdea',
    Recipe: 'Recipe'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "foyer" | "user" | "task" | "calendarEvent" | "shoppingItem" | "travelIdea" | "recipe"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Foyer: {
        payload: Prisma.$FoyerPayload<ExtArgs>
        fields: Prisma.FoyerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoyerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoyerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>
          }
          findFirst: {
            args: Prisma.FoyerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoyerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>
          }
          findMany: {
            args: Prisma.FoyerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>[]
          }
          create: {
            args: Prisma.FoyerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>
          }
          createMany: {
            args: Prisma.FoyerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoyerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>[]
          }
          delete: {
            args: Prisma.FoyerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>
          }
          update: {
            args: Prisma.FoyerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>
          }
          deleteMany: {
            args: Prisma.FoyerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoyerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FoyerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>[]
          }
          upsert: {
            args: Prisma.FoyerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoyerPayload>
          }
          aggregate: {
            args: Prisma.FoyerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFoyer>
          }
          groupBy: {
            args: Prisma.FoyerGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoyerGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoyerCountArgs<ExtArgs>
            result: $Utils.Optional<FoyerCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      CalendarEvent: {
        payload: Prisma.$CalendarEventPayload<ExtArgs>
        fields: Prisma.CalendarEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalendarEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalendarEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          findFirst: {
            args: Prisma.CalendarEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalendarEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          findMany: {
            args: Prisma.CalendarEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>[]
          }
          create: {
            args: Prisma.CalendarEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          createMany: {
            args: Prisma.CalendarEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalendarEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>[]
          }
          delete: {
            args: Prisma.CalendarEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          update: {
            args: Prisma.CalendarEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          deleteMany: {
            args: Prisma.CalendarEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalendarEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalendarEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>[]
          }
          upsert: {
            args: Prisma.CalendarEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarEventPayload>
          }
          aggregate: {
            args: Prisma.CalendarEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalendarEvent>
          }
          groupBy: {
            args: Prisma.CalendarEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalendarEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalendarEventCountArgs<ExtArgs>
            result: $Utils.Optional<CalendarEventCountAggregateOutputType> | number
          }
        }
      }
      ShoppingItem: {
        payload: Prisma.$ShoppingItemPayload<ExtArgs>
        fields: Prisma.ShoppingItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShoppingItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShoppingItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          findFirst: {
            args: Prisma.ShoppingItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShoppingItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          findMany: {
            args: Prisma.ShoppingItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>[]
          }
          create: {
            args: Prisma.ShoppingItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          createMany: {
            args: Prisma.ShoppingItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShoppingItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>[]
          }
          delete: {
            args: Prisma.ShoppingItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          update: {
            args: Prisma.ShoppingItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          deleteMany: {
            args: Prisma.ShoppingItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShoppingItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShoppingItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>[]
          }
          upsert: {
            args: Prisma.ShoppingItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShoppingItemPayload>
          }
          aggregate: {
            args: Prisma.ShoppingItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShoppingItem>
          }
          groupBy: {
            args: Prisma.ShoppingItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShoppingItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShoppingItemCountArgs<ExtArgs>
            result: $Utils.Optional<ShoppingItemCountAggregateOutputType> | number
          }
        }
      }
      TravelIdea: {
        payload: Prisma.$TravelIdeaPayload<ExtArgs>
        fields: Prisma.TravelIdeaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TravelIdeaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TravelIdeaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>
          }
          findFirst: {
            args: Prisma.TravelIdeaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TravelIdeaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>
          }
          findMany: {
            args: Prisma.TravelIdeaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>[]
          }
          create: {
            args: Prisma.TravelIdeaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>
          }
          createMany: {
            args: Prisma.TravelIdeaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TravelIdeaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>[]
          }
          delete: {
            args: Prisma.TravelIdeaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>
          }
          update: {
            args: Prisma.TravelIdeaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>
          }
          deleteMany: {
            args: Prisma.TravelIdeaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TravelIdeaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TravelIdeaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>[]
          }
          upsert: {
            args: Prisma.TravelIdeaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelIdeaPayload>
          }
          aggregate: {
            args: Prisma.TravelIdeaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTravelIdea>
          }
          groupBy: {
            args: Prisma.TravelIdeaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TravelIdeaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TravelIdeaCountArgs<ExtArgs>
            result: $Utils.Optional<TravelIdeaCountAggregateOutputType> | number
          }
        }
      }
      Recipe: {
        payload: Prisma.$RecipePayload<ExtArgs>
        fields: Prisma.RecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findFirst: {
            args: Prisma.RecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findMany: {
            args: Prisma.RecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          create: {
            args: Prisma.RecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          createMany: {
            args: Prisma.RecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          delete: {
            args: Prisma.RecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          update: {
            args: Prisma.RecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          deleteMany: {
            args: Prisma.RecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecipeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          upsert: {
            args: Prisma.RecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          aggregate: {
            args: Prisma.RecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipe>
          }
          groupBy: {
            args: Prisma.RecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    foyer?: FoyerOmit
    user?: UserOmit
    task?: TaskOmit
    calendarEvent?: CalendarEventOmit
    shoppingItem?: ShoppingItemOmit
    travelIdea?: TravelIdeaOmit
    recipe?: RecipeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FoyerCountOutputType
   */

  export type FoyerCountOutputType = {
    members: number
    calendarEvents: number
    tasks: number
    shoppingItems: number
    travelIdeas: number
    recipes: number
  }

  export type FoyerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | FoyerCountOutputTypeCountMembersArgs
    calendarEvents?: boolean | FoyerCountOutputTypeCountCalendarEventsArgs
    tasks?: boolean | FoyerCountOutputTypeCountTasksArgs
    shoppingItems?: boolean | FoyerCountOutputTypeCountShoppingItemsArgs
    travelIdeas?: boolean | FoyerCountOutputTypeCountTravelIdeasArgs
    recipes?: boolean | FoyerCountOutputTypeCountRecipesArgs
  }

  // Custom InputTypes
  /**
   * FoyerCountOutputType without action
   */
  export type FoyerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoyerCountOutputType
     */
    select?: FoyerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoyerCountOutputType without action
   */
  export type FoyerCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * FoyerCountOutputType without action
   */
  export type FoyerCountOutputTypeCountCalendarEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarEventWhereInput
  }

  /**
   * FoyerCountOutputType without action
   */
  export type FoyerCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * FoyerCountOutputType without action
   */
  export type FoyerCountOutputTypeCountShoppingItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
  }

  /**
   * FoyerCountOutputType without action
   */
  export type FoyerCountOutputTypeCountTravelIdeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelIdeaWhereInput
  }

  /**
   * FoyerCountOutputType without action
   */
  export type FoyerCountOutputTypeCountRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdEvents: number
    assignedTasks: number
    createdTravelIdeas: number
    assignedShoppings: number
    addedShoppings: number
    createdRecipes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdEvents?: boolean | UserCountOutputTypeCountCreatedEventsArgs
    assignedTasks?: boolean | UserCountOutputTypeCountAssignedTasksArgs
    createdTravelIdeas?: boolean | UserCountOutputTypeCountCreatedTravelIdeasArgs
    assignedShoppings?: boolean | UserCountOutputTypeCountAssignedShoppingsArgs
    addedShoppings?: boolean | UserCountOutputTypeCountAddedShoppingsArgs
    createdRecipes?: boolean | UserCountOutputTypeCountCreatedRecipesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTravelIdeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelIdeaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedShoppingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAddedShoppingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Foyer
   */

  export type AggregateFoyer = {
    _count: FoyerCountAggregateOutputType | null
    _min: FoyerMinAggregateOutputType | null
    _max: FoyerMaxAggregateOutputType | null
  }

  export type FoyerMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    rule: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoyerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    rule: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoyerCountAggregateOutputType = {
    id: number
    name: number
    code: number
    rule: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoyerMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    rule?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoyerMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    rule?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoyerCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    rule?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoyerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foyer to aggregate.
     */
    where?: FoyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foyers to fetch.
     */
    orderBy?: FoyerOrderByWithRelationInput | FoyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Foyers
    **/
    _count?: true | FoyerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoyerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoyerMaxAggregateInputType
  }

  export type GetFoyerAggregateType<T extends FoyerAggregateArgs> = {
        [P in keyof T & keyof AggregateFoyer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFoyer[P]>
      : GetScalarType<T[P], AggregateFoyer[P]>
  }




  export type FoyerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoyerWhereInput
    orderBy?: FoyerOrderByWithAggregationInput | FoyerOrderByWithAggregationInput[]
    by: FoyerScalarFieldEnum[] | FoyerScalarFieldEnum
    having?: FoyerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoyerCountAggregateInputType | true
    _min?: FoyerMinAggregateInputType
    _max?: FoyerMaxAggregateInputType
  }

  export type FoyerGroupByOutputType = {
    id: string
    name: string
    code: string
    rule: string
    createdAt: Date
    updatedAt: Date
    _count: FoyerCountAggregateOutputType | null
    _min: FoyerMinAggregateOutputType | null
    _max: FoyerMaxAggregateOutputType | null
  }

  type GetFoyerGroupByPayload<T extends FoyerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoyerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoyerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoyerGroupByOutputType[P]>
            : GetScalarType<T[P], FoyerGroupByOutputType[P]>
        }
      >
    >


  export type FoyerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    rule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Foyer$membersArgs<ExtArgs>
    calendarEvents?: boolean | Foyer$calendarEventsArgs<ExtArgs>
    tasks?: boolean | Foyer$tasksArgs<ExtArgs>
    shoppingItems?: boolean | Foyer$shoppingItemsArgs<ExtArgs>
    travelIdeas?: boolean | Foyer$travelIdeasArgs<ExtArgs>
    recipes?: boolean | Foyer$recipesArgs<ExtArgs>
    _count?: boolean | FoyerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["foyer"]>

  export type FoyerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    rule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["foyer"]>

  export type FoyerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    rule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["foyer"]>

  export type FoyerSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    rule?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoyerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "rule" | "createdAt" | "updatedAt", ExtArgs["result"]["foyer"]>
  export type FoyerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Foyer$membersArgs<ExtArgs>
    calendarEvents?: boolean | Foyer$calendarEventsArgs<ExtArgs>
    tasks?: boolean | Foyer$tasksArgs<ExtArgs>
    shoppingItems?: boolean | Foyer$shoppingItemsArgs<ExtArgs>
    travelIdeas?: boolean | Foyer$travelIdeasArgs<ExtArgs>
    recipes?: boolean | Foyer$recipesArgs<ExtArgs>
    _count?: boolean | FoyerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoyerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FoyerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FoyerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Foyer"
    objects: {
      members: Prisma.$UserPayload<ExtArgs>[]
      calendarEvents: Prisma.$CalendarEventPayload<ExtArgs>[]
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      shoppingItems: Prisma.$ShoppingItemPayload<ExtArgs>[]
      travelIdeas: Prisma.$TravelIdeaPayload<ExtArgs>[]
      recipes: Prisma.$RecipePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      rule: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["foyer"]>
    composites: {}
  }

  type FoyerGetPayload<S extends boolean | null | undefined | FoyerDefaultArgs> = $Result.GetResult<Prisma.$FoyerPayload, S>

  type FoyerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FoyerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FoyerCountAggregateInputType | true
    }

  export interface FoyerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Foyer'], meta: { name: 'Foyer' } }
    /**
     * Find zero or one Foyer that matches the filter.
     * @param {FoyerFindUniqueArgs} args - Arguments to find a Foyer
     * @example
     * // Get one Foyer
     * const foyer = await prisma.foyer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoyerFindUniqueArgs>(args: SelectSubset<T, FoyerFindUniqueArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Foyer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FoyerFindUniqueOrThrowArgs} args - Arguments to find a Foyer
     * @example
     * // Get one Foyer
     * const foyer = await prisma.foyer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoyerFindUniqueOrThrowArgs>(args: SelectSubset<T, FoyerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Foyer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoyerFindFirstArgs} args - Arguments to find a Foyer
     * @example
     * // Get one Foyer
     * const foyer = await prisma.foyer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoyerFindFirstArgs>(args?: SelectSubset<T, FoyerFindFirstArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Foyer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoyerFindFirstOrThrowArgs} args - Arguments to find a Foyer
     * @example
     * // Get one Foyer
     * const foyer = await prisma.foyer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoyerFindFirstOrThrowArgs>(args?: SelectSubset<T, FoyerFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Foyers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoyerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Foyers
     * const foyers = await prisma.foyer.findMany()
     * 
     * // Get first 10 Foyers
     * const foyers = await prisma.foyer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foyerWithIdOnly = await prisma.foyer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoyerFindManyArgs>(args?: SelectSubset<T, FoyerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Foyer.
     * @param {FoyerCreateArgs} args - Arguments to create a Foyer.
     * @example
     * // Create one Foyer
     * const Foyer = await prisma.foyer.create({
     *   data: {
     *     // ... data to create a Foyer
     *   }
     * })
     * 
     */
    create<T extends FoyerCreateArgs>(args: SelectSubset<T, FoyerCreateArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Foyers.
     * @param {FoyerCreateManyArgs} args - Arguments to create many Foyers.
     * @example
     * // Create many Foyers
     * const foyer = await prisma.foyer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoyerCreateManyArgs>(args?: SelectSubset<T, FoyerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Foyers and returns the data saved in the database.
     * @param {FoyerCreateManyAndReturnArgs} args - Arguments to create many Foyers.
     * @example
     * // Create many Foyers
     * const foyer = await prisma.foyer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Foyers and only return the `id`
     * const foyerWithIdOnly = await prisma.foyer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoyerCreateManyAndReturnArgs>(args?: SelectSubset<T, FoyerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Foyer.
     * @param {FoyerDeleteArgs} args - Arguments to delete one Foyer.
     * @example
     * // Delete one Foyer
     * const Foyer = await prisma.foyer.delete({
     *   where: {
     *     // ... filter to delete one Foyer
     *   }
     * })
     * 
     */
    delete<T extends FoyerDeleteArgs>(args: SelectSubset<T, FoyerDeleteArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Foyer.
     * @param {FoyerUpdateArgs} args - Arguments to update one Foyer.
     * @example
     * // Update one Foyer
     * const foyer = await prisma.foyer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoyerUpdateArgs>(args: SelectSubset<T, FoyerUpdateArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Foyers.
     * @param {FoyerDeleteManyArgs} args - Arguments to filter Foyers to delete.
     * @example
     * // Delete a few Foyers
     * const { count } = await prisma.foyer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoyerDeleteManyArgs>(args?: SelectSubset<T, FoyerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoyerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Foyers
     * const foyer = await prisma.foyer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoyerUpdateManyArgs>(args: SelectSubset<T, FoyerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foyers and returns the data updated in the database.
     * @param {FoyerUpdateManyAndReturnArgs} args - Arguments to update many Foyers.
     * @example
     * // Update many Foyers
     * const foyer = await prisma.foyer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Foyers and only return the `id`
     * const foyerWithIdOnly = await prisma.foyer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FoyerUpdateManyAndReturnArgs>(args: SelectSubset<T, FoyerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Foyer.
     * @param {FoyerUpsertArgs} args - Arguments to update or create a Foyer.
     * @example
     * // Update or create a Foyer
     * const foyer = await prisma.foyer.upsert({
     *   create: {
     *     // ... data to create a Foyer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Foyer we want to update
     *   }
     * })
     */
    upsert<T extends FoyerUpsertArgs>(args: SelectSubset<T, FoyerUpsertArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Foyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoyerCountArgs} args - Arguments to filter Foyers to count.
     * @example
     * // Count the number of Foyers
     * const count = await prisma.foyer.count({
     *   where: {
     *     // ... the filter for the Foyers we want to count
     *   }
     * })
    **/
    count<T extends FoyerCountArgs>(
      args?: Subset<T, FoyerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoyerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Foyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoyerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoyerAggregateArgs>(args: Subset<T, FoyerAggregateArgs>): Prisma.PrismaPromise<GetFoyerAggregateType<T>>

    /**
     * Group by Foyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoyerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoyerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoyerGroupByArgs['orderBy'] }
        : { orderBy?: FoyerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoyerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoyerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Foyer model
   */
  readonly fields: FoyerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Foyer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoyerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Foyer$membersArgs<ExtArgs> = {}>(args?: Subset<T, Foyer$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    calendarEvents<T extends Foyer$calendarEventsArgs<ExtArgs> = {}>(args?: Subset<T, Foyer$calendarEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tasks<T extends Foyer$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Foyer$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    shoppingItems<T extends Foyer$shoppingItemsArgs<ExtArgs> = {}>(args?: Subset<T, Foyer$shoppingItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    travelIdeas<T extends Foyer$travelIdeasArgs<ExtArgs> = {}>(args?: Subset<T, Foyer$travelIdeasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    recipes<T extends Foyer$recipesArgs<ExtArgs> = {}>(args?: Subset<T, Foyer$recipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Foyer model
   */ 
  interface FoyerFieldRefs {
    readonly id: FieldRef<"Foyer", 'String'>
    readonly name: FieldRef<"Foyer", 'String'>
    readonly code: FieldRef<"Foyer", 'String'>
    readonly rule: FieldRef<"Foyer", 'String'>
    readonly createdAt: FieldRef<"Foyer", 'DateTime'>
    readonly updatedAt: FieldRef<"Foyer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Foyer findUnique
   */
  export type FoyerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * Filter, which Foyer to fetch.
     */
    where: FoyerWhereUniqueInput
  }

  /**
   * Foyer findUniqueOrThrow
   */
  export type FoyerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * Filter, which Foyer to fetch.
     */
    where: FoyerWhereUniqueInput
  }

  /**
   * Foyer findFirst
   */
  export type FoyerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * Filter, which Foyer to fetch.
     */
    where?: FoyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foyers to fetch.
     */
    orderBy?: FoyerOrderByWithRelationInput | FoyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foyers.
     */
    cursor?: FoyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foyers.
     */
    distinct?: FoyerScalarFieldEnum | FoyerScalarFieldEnum[]
  }

  /**
   * Foyer findFirstOrThrow
   */
  export type FoyerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * Filter, which Foyer to fetch.
     */
    where?: FoyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foyers to fetch.
     */
    orderBy?: FoyerOrderByWithRelationInput | FoyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foyers.
     */
    cursor?: FoyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foyers.
     */
    distinct?: FoyerScalarFieldEnum | FoyerScalarFieldEnum[]
  }

  /**
   * Foyer findMany
   */
  export type FoyerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * Filter, which Foyers to fetch.
     */
    where?: FoyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foyers to fetch.
     */
    orderBy?: FoyerOrderByWithRelationInput | FoyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Foyers.
     */
    cursor?: FoyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foyers.
     */
    skip?: number
    distinct?: FoyerScalarFieldEnum | FoyerScalarFieldEnum[]
  }

  /**
   * Foyer create
   */
  export type FoyerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * The data needed to create a Foyer.
     */
    data: XOR<FoyerCreateInput, FoyerUncheckedCreateInput>
  }

  /**
   * Foyer createMany
   */
  export type FoyerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Foyers.
     */
    data: FoyerCreateManyInput | FoyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Foyer createManyAndReturn
   */
  export type FoyerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * The data used to create many Foyers.
     */
    data: FoyerCreateManyInput | FoyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Foyer update
   */
  export type FoyerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * The data needed to update a Foyer.
     */
    data: XOR<FoyerUpdateInput, FoyerUncheckedUpdateInput>
    /**
     * Choose, which Foyer to update.
     */
    where: FoyerWhereUniqueInput
  }

  /**
   * Foyer updateMany
   */
  export type FoyerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Foyers.
     */
    data: XOR<FoyerUpdateManyMutationInput, FoyerUncheckedUpdateManyInput>
    /**
     * Filter which Foyers to update
     */
    where?: FoyerWhereInput
  }

  /**
   * Foyer updateManyAndReturn
   */
  export type FoyerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * The data used to update Foyers.
     */
    data: XOR<FoyerUpdateManyMutationInput, FoyerUncheckedUpdateManyInput>
    /**
     * Filter which Foyers to update
     */
    where?: FoyerWhereInput
  }

  /**
   * Foyer upsert
   */
  export type FoyerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * The filter to search for the Foyer to update in case it exists.
     */
    where: FoyerWhereUniqueInput
    /**
     * In case the Foyer found by the `where` argument doesn't exist, create a new Foyer with this data.
     */
    create: XOR<FoyerCreateInput, FoyerUncheckedCreateInput>
    /**
     * In case the Foyer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoyerUpdateInput, FoyerUncheckedUpdateInput>
  }

  /**
   * Foyer delete
   */
  export type FoyerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    /**
     * Filter which Foyer to delete.
     */
    where: FoyerWhereUniqueInput
  }

  /**
   * Foyer deleteMany
   */
  export type FoyerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foyers to delete
     */
    where?: FoyerWhereInput
  }

  /**
   * Foyer.members
   */
  export type Foyer$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Foyer.calendarEvents
   */
  export type Foyer$calendarEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    where?: CalendarEventWhereInput
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    cursor?: CalendarEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * Foyer.tasks
   */
  export type Foyer$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Foyer.shoppingItems
   */
  export type Foyer$shoppingItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    cursor?: ShoppingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * Foyer.travelIdeas
   */
  export type Foyer$travelIdeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    where?: TravelIdeaWhereInput
    orderBy?: TravelIdeaOrderByWithRelationInput | TravelIdeaOrderByWithRelationInput[]
    cursor?: TravelIdeaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TravelIdeaScalarFieldEnum | TravelIdeaScalarFieldEnum[]
  }

  /**
   * Foyer.recipes
   */
  export type Foyer$recipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    cursor?: RecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Foyer without action
   */
  export type FoyerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    points: number | null
  }

  export type UserSumAggregateOutputType = {
    points: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    foyerId: string | null
    acceptedFoyerRuleAt: Date | null
    points: number | null
    pushToken: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    foyerId: string | null
    acceptedFoyerRuleAt: Date | null
    points: number | null
    pushToken: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    avatar: number
    createdAt: number
    updatedAt: number
    foyerId: number
    acceptedFoyerRuleAt: number
    points: number
    pushToken: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    points?: true
  }

  export type UserSumAggregateInputType = {
    points?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    acceptedFoyerRuleAt?: true
    points?: true
    pushToken?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    acceptedFoyerRuleAt?: true
    points?: true
    pushToken?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    acceptedFoyerRuleAt?: true
    points?: true
    pushToken?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    foyerId: string | null
    acceptedFoyerRuleAt: Date | null
    points: number
    pushToken: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    acceptedFoyerRuleAt?: boolean
    points?: boolean
    pushToken?: boolean
    foyer?: boolean | User$foyerArgs<ExtArgs>
    createdEvents?: boolean | User$createdEventsArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    createdTravelIdeas?: boolean | User$createdTravelIdeasArgs<ExtArgs>
    assignedShoppings?: boolean | User$assignedShoppingsArgs<ExtArgs>
    addedShoppings?: boolean | User$addedShoppingsArgs<ExtArgs>
    createdRecipes?: boolean | User$createdRecipesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    acceptedFoyerRuleAt?: boolean
    points?: boolean
    pushToken?: boolean
    foyer?: boolean | User$foyerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    acceptedFoyerRuleAt?: boolean
    points?: boolean
    pushToken?: boolean
    foyer?: boolean | User$foyerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    acceptedFoyerRuleAt?: boolean
    points?: boolean
    pushToken?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "avatar" | "createdAt" | "updatedAt" | "foyerId" | "acceptedFoyerRuleAt" | "points" | "pushToken", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | User$foyerArgs<ExtArgs>
    createdEvents?: boolean | User$createdEventsArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    createdTravelIdeas?: boolean | User$createdTravelIdeasArgs<ExtArgs>
    assignedShoppings?: boolean | User$assignedShoppingsArgs<ExtArgs>
    addedShoppings?: boolean | User$addedShoppingsArgs<ExtArgs>
    createdRecipes?: boolean | User$createdRecipesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | User$foyerArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | User$foyerArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      foyer: Prisma.$FoyerPayload<ExtArgs> | null
      createdEvents: Prisma.$CalendarEventPayload<ExtArgs>[]
      assignedTasks: Prisma.$TaskPayload<ExtArgs>[]
      createdTravelIdeas: Prisma.$TravelIdeaPayload<ExtArgs>[]
      assignedShoppings: Prisma.$ShoppingItemPayload<ExtArgs>[]
      addedShoppings: Prisma.$ShoppingItemPayload<ExtArgs>[]
      createdRecipes: Prisma.$RecipePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      avatar: string | null
      createdAt: Date
      updatedAt: Date
      foyerId: string | null
      acceptedFoyerRuleAt: Date | null
      points: number
      pushToken: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foyer<T extends User$foyerArgs<ExtArgs> = {}>(args?: Subset<T, User$foyerArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    createdEvents<T extends User$createdEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    assignedTasks<T extends User$assignedTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    createdTravelIdeas<T extends User$createdTravelIdeasArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTravelIdeasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    assignedShoppings<T extends User$assignedShoppingsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedShoppingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    addedShoppings<T extends User$addedShoppingsArgs<ExtArgs> = {}>(args?: Subset<T, User$addedShoppingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    createdRecipes<T extends User$createdRecipesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly foyerId: FieldRef<"User", 'String'>
    readonly acceptedFoyerRuleAt: FieldRef<"User", 'DateTime'>
    readonly points: FieldRef<"User", 'Int'>
    readonly pushToken: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.foyer
   */
  export type User$foyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Foyer
     */
    select?: FoyerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Foyer
     */
    omit?: FoyerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoyerInclude<ExtArgs> | null
    where?: FoyerWhereInput
  }

  /**
   * User.createdEvents
   */
  export type User$createdEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    where?: CalendarEventWhereInput
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    cursor?: CalendarEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * User.assignedTasks
   */
  export type User$assignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.createdTravelIdeas
   */
  export type User$createdTravelIdeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    where?: TravelIdeaWhereInput
    orderBy?: TravelIdeaOrderByWithRelationInput | TravelIdeaOrderByWithRelationInput[]
    cursor?: TravelIdeaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TravelIdeaScalarFieldEnum | TravelIdeaScalarFieldEnum[]
  }

  /**
   * User.assignedShoppings
   */
  export type User$assignedShoppingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    cursor?: ShoppingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * User.addedShoppings
   */
  export type User$addedShoppingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    cursor?: ShoppingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * User.createdRecipes
   */
  export type User$createdRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    cursor?: RecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    points: number | null
  }

  export type TaskSumAggregateOutputType = {
    points: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    completed: boolean | null
    points: number | null
    createdAt: Date | null
    updatedAt: Date | null
    foyerId: string | null
    assignedToId: string | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    completed: boolean | null
    points: number | null
    createdAt: Date | null
    updatedAt: Date | null
    foyerId: string | null
    assignedToId: string | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    completed: number
    points: number
    createdAt: number
    updatedAt: number
    foyerId: number
    assignedToId: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    points?: true
  }

  export type TaskSumAggregateInputType = {
    points?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    completed?: true
    points?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    assignedToId?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    completed?: true
    points?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    assignedToId?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    completed?: true
    points?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    assignedToId?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string | null
    completed: boolean
    points: number
    createdAt: Date
    updatedAt: Date
    foyerId: string
    assignedToId: string | null
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    completed?: boolean
    points?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    assignedToId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | Task$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    completed?: boolean
    points?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    assignedToId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | Task$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    completed?: boolean
    points?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    assignedToId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | Task$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    completed?: boolean
    points?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    assignedToId?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "completed" | "points" | "createdAt" | "updatedAt" | "foyerId" | "assignedToId", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | Task$assignedToArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | Task$assignedToArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | Task$assignedToArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      foyer: Prisma.$FoyerPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      completed: boolean
      points: number
      createdAt: Date
      updatedAt: Date
      foyerId: string
      assignedToId: string | null
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foyer<T extends FoyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoyerDefaultArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    assignedTo<T extends Task$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, Task$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly completed: FieldRef<"Task", 'Boolean'>
    readonly points: FieldRef<"Task", 'Int'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
    readonly foyerId: FieldRef<"Task", 'String'>
    readonly assignedToId: FieldRef<"Task", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task.assignedTo
   */
  export type Task$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model CalendarEvent
   */

  export type AggregateCalendarEvent = {
    _count: CalendarEventCountAggregateOutputType | null
    _min: CalendarEventMinAggregateOutputType | null
    _max: CalendarEventMaxAggregateOutputType | null
  }

  export type CalendarEventMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    recurrence: string | null
    createdAt: Date | null
    updatedAt: Date | null
    foyerId: string | null
    creatorId: string | null
  }

  export type CalendarEventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    recurrence: string | null
    createdAt: Date | null
    updatedAt: Date | null
    foyerId: string | null
    creatorId: string | null
  }

  export type CalendarEventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startDate: number
    endDate: number
    recurrence: number
    createdAt: number
    updatedAt: number
    foyerId: number
    creatorId: number
    _all: number
  }


  export type CalendarEventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    recurrence?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    creatorId?: true
  }

  export type CalendarEventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    recurrence?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    creatorId?: true
  }

  export type CalendarEventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startDate?: true
    endDate?: true
    recurrence?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    creatorId?: true
    _all?: true
  }

  export type CalendarEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarEvent to aggregate.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalendarEvents
    **/
    _count?: true | CalendarEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalendarEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalendarEventMaxAggregateInputType
  }

  export type GetCalendarEventAggregateType<T extends CalendarEventAggregateArgs> = {
        [P in keyof T & keyof AggregateCalendarEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalendarEvent[P]>
      : GetScalarType<T[P], AggregateCalendarEvent[P]>
  }




  export type CalendarEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarEventWhereInput
    orderBy?: CalendarEventOrderByWithAggregationInput | CalendarEventOrderByWithAggregationInput[]
    by: CalendarEventScalarFieldEnum[] | CalendarEventScalarFieldEnum
    having?: CalendarEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalendarEventCountAggregateInputType | true
    _min?: CalendarEventMinAggregateInputType
    _max?: CalendarEventMaxAggregateInputType
  }

  export type CalendarEventGroupByOutputType = {
    id: string
    title: string
    description: string | null
    startDate: Date
    endDate: Date
    recurrence: string
    createdAt: Date
    updatedAt: Date
    foyerId: string
    creatorId: string | null
    _count: CalendarEventCountAggregateOutputType | null
    _min: CalendarEventMinAggregateOutputType | null
    _max: CalendarEventMaxAggregateOutputType | null
  }

  type GetCalendarEventGroupByPayload<T extends CalendarEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalendarEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalendarEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalendarEventGroupByOutputType[P]>
            : GetScalarType<T[P], CalendarEventGroupByOutputType[P]>
        }
      >
    >


  export type CalendarEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    recurrence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | CalendarEvent$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["calendarEvent"]>

  export type CalendarEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    recurrence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | CalendarEvent$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["calendarEvent"]>

  export type CalendarEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    recurrence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | CalendarEvent$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["calendarEvent"]>

  export type CalendarEventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    recurrence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    creatorId?: boolean
  }

  export type CalendarEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "startDate" | "endDate" | "recurrence" | "createdAt" | "updatedAt" | "foyerId" | "creatorId", ExtArgs["result"]["calendarEvent"]>
  export type CalendarEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | CalendarEvent$creatorArgs<ExtArgs>
  }
  export type CalendarEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | CalendarEvent$creatorArgs<ExtArgs>
  }
  export type CalendarEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | CalendarEvent$creatorArgs<ExtArgs>
  }

  export type $CalendarEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalendarEvent"
    objects: {
      foyer: Prisma.$FoyerPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      startDate: Date
      endDate: Date
      recurrence: string
      createdAt: Date
      updatedAt: Date
      foyerId: string
      creatorId: string | null
    }, ExtArgs["result"]["calendarEvent"]>
    composites: {}
  }

  type CalendarEventGetPayload<S extends boolean | null | undefined | CalendarEventDefaultArgs> = $Result.GetResult<Prisma.$CalendarEventPayload, S>

  type CalendarEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalendarEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalendarEventCountAggregateInputType | true
    }

  export interface CalendarEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalendarEvent'], meta: { name: 'CalendarEvent' } }
    /**
     * Find zero or one CalendarEvent that matches the filter.
     * @param {CalendarEventFindUniqueArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalendarEventFindUniqueArgs>(args: SelectSubset<T, CalendarEventFindUniqueArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CalendarEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalendarEventFindUniqueOrThrowArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalendarEventFindUniqueOrThrowArgs>(args: SelectSubset<T, CalendarEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CalendarEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindFirstArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalendarEventFindFirstArgs>(args?: SelectSubset<T, CalendarEventFindFirstArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CalendarEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindFirstOrThrowArgs} args - Arguments to find a CalendarEvent
     * @example
     * // Get one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalendarEventFindFirstOrThrowArgs>(args?: SelectSubset<T, CalendarEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CalendarEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalendarEvents
     * const calendarEvents = await prisma.calendarEvent.findMany()
     * 
     * // Get first 10 CalendarEvents
     * const calendarEvents = await prisma.calendarEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calendarEventWithIdOnly = await prisma.calendarEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalendarEventFindManyArgs>(args?: SelectSubset<T, CalendarEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CalendarEvent.
     * @param {CalendarEventCreateArgs} args - Arguments to create a CalendarEvent.
     * @example
     * // Create one CalendarEvent
     * const CalendarEvent = await prisma.calendarEvent.create({
     *   data: {
     *     // ... data to create a CalendarEvent
     *   }
     * })
     * 
     */
    create<T extends CalendarEventCreateArgs>(args: SelectSubset<T, CalendarEventCreateArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CalendarEvents.
     * @param {CalendarEventCreateManyArgs} args - Arguments to create many CalendarEvents.
     * @example
     * // Create many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalendarEventCreateManyArgs>(args?: SelectSubset<T, CalendarEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalendarEvents and returns the data saved in the database.
     * @param {CalendarEventCreateManyAndReturnArgs} args - Arguments to create many CalendarEvents.
     * @example
     * // Create many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalendarEvents and only return the `id`
     * const calendarEventWithIdOnly = await prisma.calendarEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalendarEventCreateManyAndReturnArgs>(args?: SelectSubset<T, CalendarEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CalendarEvent.
     * @param {CalendarEventDeleteArgs} args - Arguments to delete one CalendarEvent.
     * @example
     * // Delete one CalendarEvent
     * const CalendarEvent = await prisma.calendarEvent.delete({
     *   where: {
     *     // ... filter to delete one CalendarEvent
     *   }
     * })
     * 
     */
    delete<T extends CalendarEventDeleteArgs>(args: SelectSubset<T, CalendarEventDeleteArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CalendarEvent.
     * @param {CalendarEventUpdateArgs} args - Arguments to update one CalendarEvent.
     * @example
     * // Update one CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalendarEventUpdateArgs>(args: SelectSubset<T, CalendarEventUpdateArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CalendarEvents.
     * @param {CalendarEventDeleteManyArgs} args - Arguments to filter CalendarEvents to delete.
     * @example
     * // Delete a few CalendarEvents
     * const { count } = await prisma.calendarEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalendarEventDeleteManyArgs>(args?: SelectSubset<T, CalendarEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalendarEventUpdateManyArgs>(args: SelectSubset<T, CalendarEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarEvents and returns the data updated in the database.
     * @param {CalendarEventUpdateManyAndReturnArgs} args - Arguments to update many CalendarEvents.
     * @example
     * // Update many CalendarEvents
     * const calendarEvent = await prisma.calendarEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalendarEvents and only return the `id`
     * const calendarEventWithIdOnly = await prisma.calendarEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalendarEventUpdateManyAndReturnArgs>(args: SelectSubset<T, CalendarEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CalendarEvent.
     * @param {CalendarEventUpsertArgs} args - Arguments to update or create a CalendarEvent.
     * @example
     * // Update or create a CalendarEvent
     * const calendarEvent = await prisma.calendarEvent.upsert({
     *   create: {
     *     // ... data to create a CalendarEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalendarEvent we want to update
     *   }
     * })
     */
    upsert<T extends CalendarEventUpsertArgs>(args: SelectSubset<T, CalendarEventUpsertArgs<ExtArgs>>): Prisma__CalendarEventClient<$Result.GetResult<Prisma.$CalendarEventPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CalendarEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventCountArgs} args - Arguments to filter CalendarEvents to count.
     * @example
     * // Count the number of CalendarEvents
     * const count = await prisma.calendarEvent.count({
     *   where: {
     *     // ... the filter for the CalendarEvents we want to count
     *   }
     * })
    **/
    count<T extends CalendarEventCountArgs>(
      args?: Subset<T, CalendarEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalendarEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalendarEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalendarEventAggregateArgs>(args: Subset<T, CalendarEventAggregateArgs>): Prisma.PrismaPromise<GetCalendarEventAggregateType<T>>

    /**
     * Group by CalendarEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalendarEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalendarEventGroupByArgs['orderBy'] }
        : { orderBy?: CalendarEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalendarEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendarEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalendarEvent model
   */
  readonly fields: CalendarEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalendarEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalendarEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foyer<T extends FoyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoyerDefaultArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    creator<T extends CalendarEvent$creatorArgs<ExtArgs> = {}>(args?: Subset<T, CalendarEvent$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalendarEvent model
   */ 
  interface CalendarEventFieldRefs {
    readonly id: FieldRef<"CalendarEvent", 'String'>
    readonly title: FieldRef<"CalendarEvent", 'String'>
    readonly description: FieldRef<"CalendarEvent", 'String'>
    readonly startDate: FieldRef<"CalendarEvent", 'DateTime'>
    readonly endDate: FieldRef<"CalendarEvent", 'DateTime'>
    readonly recurrence: FieldRef<"CalendarEvent", 'String'>
    readonly createdAt: FieldRef<"CalendarEvent", 'DateTime'>
    readonly updatedAt: FieldRef<"CalendarEvent", 'DateTime'>
    readonly foyerId: FieldRef<"CalendarEvent", 'String'>
    readonly creatorId: FieldRef<"CalendarEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CalendarEvent findUnique
   */
  export type CalendarEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent findUniqueOrThrow
   */
  export type CalendarEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent findFirst
   */
  export type CalendarEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarEvents.
     */
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent findFirstOrThrow
   */
  export type CalendarEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvent to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarEvents.
     */
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent findMany
   */
  export type CalendarEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter, which CalendarEvents to fetch.
     */
    where?: CalendarEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarEvents to fetch.
     */
    orderBy?: CalendarEventOrderByWithRelationInput | CalendarEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalendarEvents.
     */
    cursor?: CalendarEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarEvents.
     */
    skip?: number
    distinct?: CalendarEventScalarFieldEnum | CalendarEventScalarFieldEnum[]
  }

  /**
   * CalendarEvent create
   */
  export type CalendarEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * The data needed to create a CalendarEvent.
     */
    data: XOR<CalendarEventCreateInput, CalendarEventUncheckedCreateInput>
  }

  /**
   * CalendarEvent createMany
   */
  export type CalendarEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalendarEvents.
     */
    data: CalendarEventCreateManyInput | CalendarEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalendarEvent createManyAndReturn
   */
  export type CalendarEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * The data used to create many CalendarEvents.
     */
    data: CalendarEventCreateManyInput | CalendarEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalendarEvent update
   */
  export type CalendarEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * The data needed to update a CalendarEvent.
     */
    data: XOR<CalendarEventUpdateInput, CalendarEventUncheckedUpdateInput>
    /**
     * Choose, which CalendarEvent to update.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent updateMany
   */
  export type CalendarEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalendarEvents.
     */
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyInput>
    /**
     * Filter which CalendarEvents to update
     */
    where?: CalendarEventWhereInput
  }

  /**
   * CalendarEvent updateManyAndReturn
   */
  export type CalendarEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * The data used to update CalendarEvents.
     */
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyInput>
    /**
     * Filter which CalendarEvents to update
     */
    where?: CalendarEventWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalendarEvent upsert
   */
  export type CalendarEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * The filter to search for the CalendarEvent to update in case it exists.
     */
    where: CalendarEventWhereUniqueInput
    /**
     * In case the CalendarEvent found by the `where` argument doesn't exist, create a new CalendarEvent with this data.
     */
    create: XOR<CalendarEventCreateInput, CalendarEventUncheckedCreateInput>
    /**
     * In case the CalendarEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalendarEventUpdateInput, CalendarEventUncheckedUpdateInput>
  }

  /**
   * CalendarEvent delete
   */
  export type CalendarEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
    /**
     * Filter which CalendarEvent to delete.
     */
    where: CalendarEventWhereUniqueInput
  }

  /**
   * CalendarEvent deleteMany
   */
  export type CalendarEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarEvents to delete
     */
    where?: CalendarEventWhereInput
  }

  /**
   * CalendarEvent.creator
   */
  export type CalendarEvent$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CalendarEvent without action
   */
  export type CalendarEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarEvent
     */
    select?: CalendarEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarEvent
     */
    omit?: CalendarEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarEventInclude<ExtArgs> | null
  }


  /**
   * Model ShoppingItem
   */

  export type AggregateShoppingItem = {
    _count: ShoppingItemCountAggregateOutputType | null
    _min: ShoppingItemMinAggregateOutputType | null
    _max: ShoppingItemMaxAggregateOutputType | null
  }

  export type ShoppingItemMinAggregateOutputType = {
    id: string | null
    name: string | null
    quantity: string | null
    purchased: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    foyerId: string | null
    assignedToId: string | null
    addedById: string | null
  }

  export type ShoppingItemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    quantity: string | null
    purchased: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    foyerId: string | null
    assignedToId: string | null
    addedById: string | null
  }

  export type ShoppingItemCountAggregateOutputType = {
    id: number
    name: number
    quantity: number
    purchased: number
    createdAt: number
    updatedAt: number
    foyerId: number
    assignedToId: number
    addedById: number
    _all: number
  }


  export type ShoppingItemMinAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    purchased?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    assignedToId?: true
    addedById?: true
  }

  export type ShoppingItemMaxAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    purchased?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    assignedToId?: true
    addedById?: true
  }

  export type ShoppingItemCountAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    purchased?: true
    createdAt?: true
    updatedAt?: true
    foyerId?: true
    assignedToId?: true
    addedById?: true
    _all?: true
  }

  export type ShoppingItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingItem to aggregate.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShoppingItems
    **/
    _count?: true | ShoppingItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShoppingItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShoppingItemMaxAggregateInputType
  }

  export type GetShoppingItemAggregateType<T extends ShoppingItemAggregateArgs> = {
        [P in keyof T & keyof AggregateShoppingItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShoppingItem[P]>
      : GetScalarType<T[P], AggregateShoppingItem[P]>
  }




  export type ShoppingItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShoppingItemWhereInput
    orderBy?: ShoppingItemOrderByWithAggregationInput | ShoppingItemOrderByWithAggregationInput[]
    by: ShoppingItemScalarFieldEnum[] | ShoppingItemScalarFieldEnum
    having?: ShoppingItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShoppingItemCountAggregateInputType | true
    _min?: ShoppingItemMinAggregateInputType
    _max?: ShoppingItemMaxAggregateInputType
  }

  export type ShoppingItemGroupByOutputType = {
    id: string
    name: string
    quantity: string | null
    purchased: boolean
    createdAt: Date
    updatedAt: Date
    foyerId: string
    assignedToId: string | null
    addedById: string | null
    _count: ShoppingItemCountAggregateOutputType | null
    _min: ShoppingItemMinAggregateOutputType | null
    _max: ShoppingItemMaxAggregateOutputType | null
  }

  type GetShoppingItemGroupByPayload<T extends ShoppingItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShoppingItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShoppingItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShoppingItemGroupByOutputType[P]>
            : GetScalarType<T[P], ShoppingItemGroupByOutputType[P]>
        }
      >
    >


  export type ShoppingItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    quantity?: boolean
    purchased?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    assignedToId?: boolean
    addedById?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | ShoppingItem$assignedToArgs<ExtArgs>
    addedBy?: boolean | ShoppingItem$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingItem"]>

  export type ShoppingItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    quantity?: boolean
    purchased?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    assignedToId?: boolean
    addedById?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | ShoppingItem$assignedToArgs<ExtArgs>
    addedBy?: boolean | ShoppingItem$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingItem"]>

  export type ShoppingItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    quantity?: boolean
    purchased?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    assignedToId?: boolean
    addedById?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | ShoppingItem$assignedToArgs<ExtArgs>
    addedBy?: boolean | ShoppingItem$addedByArgs<ExtArgs>
  }, ExtArgs["result"]["shoppingItem"]>

  export type ShoppingItemSelectScalar = {
    id?: boolean
    name?: boolean
    quantity?: boolean
    purchased?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    foyerId?: boolean
    assignedToId?: boolean
    addedById?: boolean
  }

  export type ShoppingItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "quantity" | "purchased" | "createdAt" | "updatedAt" | "foyerId" | "assignedToId" | "addedById", ExtArgs["result"]["shoppingItem"]>
  export type ShoppingItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | ShoppingItem$assignedToArgs<ExtArgs>
    addedBy?: boolean | ShoppingItem$addedByArgs<ExtArgs>
  }
  export type ShoppingItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | ShoppingItem$assignedToArgs<ExtArgs>
    addedBy?: boolean | ShoppingItem$addedByArgs<ExtArgs>
  }
  export type ShoppingItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    assignedTo?: boolean | ShoppingItem$assignedToArgs<ExtArgs>
    addedBy?: boolean | ShoppingItem$addedByArgs<ExtArgs>
  }

  export type $ShoppingItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShoppingItem"
    objects: {
      foyer: Prisma.$FoyerPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      addedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      quantity: string | null
      purchased: boolean
      createdAt: Date
      updatedAt: Date
      foyerId: string
      assignedToId: string | null
      addedById: string | null
    }, ExtArgs["result"]["shoppingItem"]>
    composites: {}
  }

  type ShoppingItemGetPayload<S extends boolean | null | undefined | ShoppingItemDefaultArgs> = $Result.GetResult<Prisma.$ShoppingItemPayload, S>

  type ShoppingItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShoppingItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShoppingItemCountAggregateInputType | true
    }

  export interface ShoppingItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShoppingItem'], meta: { name: 'ShoppingItem' } }
    /**
     * Find zero or one ShoppingItem that matches the filter.
     * @param {ShoppingItemFindUniqueArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShoppingItemFindUniqueArgs>(args: SelectSubset<T, ShoppingItemFindUniqueArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ShoppingItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShoppingItemFindUniqueOrThrowArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShoppingItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ShoppingItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ShoppingItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindFirstArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShoppingItemFindFirstArgs>(args?: SelectSubset<T, ShoppingItemFindFirstArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ShoppingItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindFirstOrThrowArgs} args - Arguments to find a ShoppingItem
     * @example
     * // Get one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShoppingItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ShoppingItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ShoppingItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShoppingItems
     * const shoppingItems = await prisma.shoppingItem.findMany()
     * 
     * // Get first 10 ShoppingItems
     * const shoppingItems = await prisma.shoppingItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shoppingItemWithIdOnly = await prisma.shoppingItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShoppingItemFindManyArgs>(args?: SelectSubset<T, ShoppingItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ShoppingItem.
     * @param {ShoppingItemCreateArgs} args - Arguments to create a ShoppingItem.
     * @example
     * // Create one ShoppingItem
     * const ShoppingItem = await prisma.shoppingItem.create({
     *   data: {
     *     // ... data to create a ShoppingItem
     *   }
     * })
     * 
     */
    create<T extends ShoppingItemCreateArgs>(args: SelectSubset<T, ShoppingItemCreateArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ShoppingItems.
     * @param {ShoppingItemCreateManyArgs} args - Arguments to create many ShoppingItems.
     * @example
     * // Create many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShoppingItemCreateManyArgs>(args?: SelectSubset<T, ShoppingItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShoppingItems and returns the data saved in the database.
     * @param {ShoppingItemCreateManyAndReturnArgs} args - Arguments to create many ShoppingItems.
     * @example
     * // Create many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShoppingItems and only return the `id`
     * const shoppingItemWithIdOnly = await prisma.shoppingItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShoppingItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ShoppingItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ShoppingItem.
     * @param {ShoppingItemDeleteArgs} args - Arguments to delete one ShoppingItem.
     * @example
     * // Delete one ShoppingItem
     * const ShoppingItem = await prisma.shoppingItem.delete({
     *   where: {
     *     // ... filter to delete one ShoppingItem
     *   }
     * })
     * 
     */
    delete<T extends ShoppingItemDeleteArgs>(args: SelectSubset<T, ShoppingItemDeleteArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ShoppingItem.
     * @param {ShoppingItemUpdateArgs} args - Arguments to update one ShoppingItem.
     * @example
     * // Update one ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShoppingItemUpdateArgs>(args: SelectSubset<T, ShoppingItemUpdateArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ShoppingItems.
     * @param {ShoppingItemDeleteManyArgs} args - Arguments to filter ShoppingItems to delete.
     * @example
     * // Delete a few ShoppingItems
     * const { count } = await prisma.shoppingItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShoppingItemDeleteManyArgs>(args?: SelectSubset<T, ShoppingItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShoppingItemUpdateManyArgs>(args: SelectSubset<T, ShoppingItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShoppingItems and returns the data updated in the database.
     * @param {ShoppingItemUpdateManyAndReturnArgs} args - Arguments to update many ShoppingItems.
     * @example
     * // Update many ShoppingItems
     * const shoppingItem = await prisma.shoppingItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShoppingItems and only return the `id`
     * const shoppingItemWithIdOnly = await prisma.shoppingItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShoppingItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ShoppingItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ShoppingItem.
     * @param {ShoppingItemUpsertArgs} args - Arguments to update or create a ShoppingItem.
     * @example
     * // Update or create a ShoppingItem
     * const shoppingItem = await prisma.shoppingItem.upsert({
     *   create: {
     *     // ... data to create a ShoppingItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShoppingItem we want to update
     *   }
     * })
     */
    upsert<T extends ShoppingItemUpsertArgs>(args: SelectSubset<T, ShoppingItemUpsertArgs<ExtArgs>>): Prisma__ShoppingItemClient<$Result.GetResult<Prisma.$ShoppingItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ShoppingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemCountArgs} args - Arguments to filter ShoppingItems to count.
     * @example
     * // Count the number of ShoppingItems
     * const count = await prisma.shoppingItem.count({
     *   where: {
     *     // ... the filter for the ShoppingItems we want to count
     *   }
     * })
    **/
    count<T extends ShoppingItemCountArgs>(
      args?: Subset<T, ShoppingItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShoppingItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShoppingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShoppingItemAggregateArgs>(args: Subset<T, ShoppingItemAggregateArgs>): Prisma.PrismaPromise<GetShoppingItemAggregateType<T>>

    /**
     * Group by ShoppingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShoppingItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShoppingItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShoppingItemGroupByArgs['orderBy'] }
        : { orderBy?: ShoppingItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShoppingItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShoppingItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShoppingItem model
   */
  readonly fields: ShoppingItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShoppingItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShoppingItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foyer<T extends FoyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoyerDefaultArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    assignedTo<T extends ShoppingItem$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, ShoppingItem$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    addedBy<T extends ShoppingItem$addedByArgs<ExtArgs> = {}>(args?: Subset<T, ShoppingItem$addedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShoppingItem model
   */ 
  interface ShoppingItemFieldRefs {
    readonly id: FieldRef<"ShoppingItem", 'String'>
    readonly name: FieldRef<"ShoppingItem", 'String'>
    readonly quantity: FieldRef<"ShoppingItem", 'String'>
    readonly purchased: FieldRef<"ShoppingItem", 'Boolean'>
    readonly createdAt: FieldRef<"ShoppingItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ShoppingItem", 'DateTime'>
    readonly foyerId: FieldRef<"ShoppingItem", 'String'>
    readonly assignedToId: FieldRef<"ShoppingItem", 'String'>
    readonly addedById: FieldRef<"ShoppingItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ShoppingItem findUnique
   */
  export type ShoppingItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem findUniqueOrThrow
   */
  export type ShoppingItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem findFirst
   */
  export type ShoppingItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingItems.
     */
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem findFirstOrThrow
   */
  export type ShoppingItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItem to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShoppingItems.
     */
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem findMany
   */
  export type ShoppingItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter, which ShoppingItems to fetch.
     */
    where?: ShoppingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShoppingItems to fetch.
     */
    orderBy?: ShoppingItemOrderByWithRelationInput | ShoppingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShoppingItems.
     */
    cursor?: ShoppingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShoppingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShoppingItems.
     */
    skip?: number
    distinct?: ShoppingItemScalarFieldEnum | ShoppingItemScalarFieldEnum[]
  }

  /**
   * ShoppingItem create
   */
  export type ShoppingItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ShoppingItem.
     */
    data: XOR<ShoppingItemCreateInput, ShoppingItemUncheckedCreateInput>
  }

  /**
   * ShoppingItem createMany
   */
  export type ShoppingItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShoppingItems.
     */
    data: ShoppingItemCreateManyInput | ShoppingItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShoppingItem createManyAndReturn
   */
  export type ShoppingItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * The data used to create many ShoppingItems.
     */
    data: ShoppingItemCreateManyInput | ShoppingItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingItem update
   */
  export type ShoppingItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ShoppingItem.
     */
    data: XOR<ShoppingItemUpdateInput, ShoppingItemUncheckedUpdateInput>
    /**
     * Choose, which ShoppingItem to update.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem updateMany
   */
  export type ShoppingItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShoppingItems.
     */
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingItems to update
     */
    where?: ShoppingItemWhereInput
  }

  /**
   * ShoppingItem updateManyAndReturn
   */
  export type ShoppingItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * The data used to update ShoppingItems.
     */
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyInput>
    /**
     * Filter which ShoppingItems to update
     */
    where?: ShoppingItemWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShoppingItem upsert
   */
  export type ShoppingItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ShoppingItem to update in case it exists.
     */
    where: ShoppingItemWhereUniqueInput
    /**
     * In case the ShoppingItem found by the `where` argument doesn't exist, create a new ShoppingItem with this data.
     */
    create: XOR<ShoppingItemCreateInput, ShoppingItemUncheckedCreateInput>
    /**
     * In case the ShoppingItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShoppingItemUpdateInput, ShoppingItemUncheckedUpdateInput>
  }

  /**
   * ShoppingItem delete
   */
  export type ShoppingItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
    /**
     * Filter which ShoppingItem to delete.
     */
    where: ShoppingItemWhereUniqueInput
  }

  /**
   * ShoppingItem deleteMany
   */
  export type ShoppingItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShoppingItems to delete
     */
    where?: ShoppingItemWhereInput
  }

  /**
   * ShoppingItem.assignedTo
   */
  export type ShoppingItem$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ShoppingItem.addedBy
   */
  export type ShoppingItem$addedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ShoppingItem without action
   */
  export type ShoppingItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShoppingItem
     */
    select?: ShoppingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShoppingItem
     */
    omit?: ShoppingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShoppingItemInclude<ExtArgs> | null
  }


  /**
   * Model TravelIdea
   */

  export type AggregateTravelIdea = {
    _count: TravelIdeaCountAggregateOutputType | null
    _avg: TravelIdeaAvgAggregateOutputType | null
    _sum: TravelIdeaSumAggregateOutputType | null
    _min: TravelIdeaMinAggregateOutputType | null
    _max: TravelIdeaMaxAggregateOutputType | null
  }

  export type TravelIdeaAvgAggregateOutputType = {
    votes: number | null
  }

  export type TravelIdeaSumAggregateOutputType = {
    votes: number | null
  }

  export type TravelIdeaMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    votes: number | null
    foyerId: string | null
    creatorId: string | null
  }

  export type TravelIdeaMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    votes: number | null
    foyerId: string | null
    creatorId: string | null
  }

  export type TravelIdeaCountAggregateOutputType = {
    id: number
    title: number
    description: number
    location: number
    createdAt: number
    updatedAt: number
    votes: number
    foyerId: number
    creatorId: number
    _all: number
  }


  export type TravelIdeaAvgAggregateInputType = {
    votes?: true
  }

  export type TravelIdeaSumAggregateInputType = {
    votes?: true
  }

  export type TravelIdeaMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    votes?: true
    foyerId?: true
    creatorId?: true
  }

  export type TravelIdeaMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    votes?: true
    foyerId?: true
    creatorId?: true
  }

  export type TravelIdeaCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    votes?: true
    foyerId?: true
    creatorId?: true
    _all?: true
  }

  export type TravelIdeaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TravelIdea to aggregate.
     */
    where?: TravelIdeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelIdeas to fetch.
     */
    orderBy?: TravelIdeaOrderByWithRelationInput | TravelIdeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TravelIdeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelIdeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelIdeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TravelIdeas
    **/
    _count?: true | TravelIdeaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TravelIdeaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TravelIdeaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TravelIdeaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TravelIdeaMaxAggregateInputType
  }

  export type GetTravelIdeaAggregateType<T extends TravelIdeaAggregateArgs> = {
        [P in keyof T & keyof AggregateTravelIdea]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTravelIdea[P]>
      : GetScalarType<T[P], AggregateTravelIdea[P]>
  }




  export type TravelIdeaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelIdeaWhereInput
    orderBy?: TravelIdeaOrderByWithAggregationInput | TravelIdeaOrderByWithAggregationInput[]
    by: TravelIdeaScalarFieldEnum[] | TravelIdeaScalarFieldEnum
    having?: TravelIdeaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TravelIdeaCountAggregateInputType | true
    _avg?: TravelIdeaAvgAggregateInputType
    _sum?: TravelIdeaSumAggregateInputType
    _min?: TravelIdeaMinAggregateInputType
    _max?: TravelIdeaMaxAggregateInputType
  }

  export type TravelIdeaGroupByOutputType = {
    id: string
    title: string
    description: string | null
    location: string | null
    createdAt: Date
    updatedAt: Date
    votes: number
    foyerId: string
    creatorId: string | null
    _count: TravelIdeaCountAggregateOutputType | null
    _avg: TravelIdeaAvgAggregateOutputType | null
    _sum: TravelIdeaSumAggregateOutputType | null
    _min: TravelIdeaMinAggregateOutputType | null
    _max: TravelIdeaMaxAggregateOutputType | null
  }

  type GetTravelIdeaGroupByPayload<T extends TravelIdeaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TravelIdeaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TravelIdeaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TravelIdeaGroupByOutputType[P]>
            : GetScalarType<T[P], TravelIdeaGroupByOutputType[P]>
        }
      >
    >


  export type TravelIdeaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | TravelIdea$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["travelIdea"]>

  export type TravelIdeaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | TravelIdea$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["travelIdea"]>

  export type TravelIdeaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | TravelIdea$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["travelIdea"]>

  export type TravelIdeaSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean
    foyerId?: boolean
    creatorId?: boolean
  }

  export type TravelIdeaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "location" | "createdAt" | "updatedAt" | "votes" | "foyerId" | "creatorId", ExtArgs["result"]["travelIdea"]>
  export type TravelIdeaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | TravelIdea$creatorArgs<ExtArgs>
  }
  export type TravelIdeaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | TravelIdea$creatorArgs<ExtArgs>
  }
  export type TravelIdeaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | TravelIdea$creatorArgs<ExtArgs>
  }

  export type $TravelIdeaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TravelIdea"
    objects: {
      foyer: Prisma.$FoyerPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      location: string | null
      createdAt: Date
      updatedAt: Date
      votes: number
      foyerId: string
      creatorId: string | null
    }, ExtArgs["result"]["travelIdea"]>
    composites: {}
  }

  type TravelIdeaGetPayload<S extends boolean | null | undefined | TravelIdeaDefaultArgs> = $Result.GetResult<Prisma.$TravelIdeaPayload, S>

  type TravelIdeaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TravelIdeaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TravelIdeaCountAggregateInputType | true
    }

  export interface TravelIdeaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TravelIdea'], meta: { name: 'TravelIdea' } }
    /**
     * Find zero or one TravelIdea that matches the filter.
     * @param {TravelIdeaFindUniqueArgs} args - Arguments to find a TravelIdea
     * @example
     * // Get one TravelIdea
     * const travelIdea = await prisma.travelIdea.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TravelIdeaFindUniqueArgs>(args: SelectSubset<T, TravelIdeaFindUniqueArgs<ExtArgs>>): Prisma__TravelIdeaClient<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one TravelIdea that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TravelIdeaFindUniqueOrThrowArgs} args - Arguments to find a TravelIdea
     * @example
     * // Get one TravelIdea
     * const travelIdea = await prisma.travelIdea.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TravelIdeaFindUniqueOrThrowArgs>(args: SelectSubset<T, TravelIdeaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TravelIdeaClient<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first TravelIdea that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelIdeaFindFirstArgs} args - Arguments to find a TravelIdea
     * @example
     * // Get one TravelIdea
     * const travelIdea = await prisma.travelIdea.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TravelIdeaFindFirstArgs>(args?: SelectSubset<T, TravelIdeaFindFirstArgs<ExtArgs>>): Prisma__TravelIdeaClient<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first TravelIdea that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelIdeaFindFirstOrThrowArgs} args - Arguments to find a TravelIdea
     * @example
     * // Get one TravelIdea
     * const travelIdea = await prisma.travelIdea.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TravelIdeaFindFirstOrThrowArgs>(args?: SelectSubset<T, TravelIdeaFindFirstOrThrowArgs<ExtArgs>>): Prisma__TravelIdeaClient<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more TravelIdeas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelIdeaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TravelIdeas
     * const travelIdeas = await prisma.travelIdea.findMany()
     * 
     * // Get first 10 TravelIdeas
     * const travelIdeas = await prisma.travelIdea.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const travelIdeaWithIdOnly = await prisma.travelIdea.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TravelIdeaFindManyArgs>(args?: SelectSubset<T, TravelIdeaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a TravelIdea.
     * @param {TravelIdeaCreateArgs} args - Arguments to create a TravelIdea.
     * @example
     * // Create one TravelIdea
     * const TravelIdea = await prisma.travelIdea.create({
     *   data: {
     *     // ... data to create a TravelIdea
     *   }
     * })
     * 
     */
    create<T extends TravelIdeaCreateArgs>(args: SelectSubset<T, TravelIdeaCreateArgs<ExtArgs>>): Prisma__TravelIdeaClient<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many TravelIdeas.
     * @param {TravelIdeaCreateManyArgs} args - Arguments to create many TravelIdeas.
     * @example
     * // Create many TravelIdeas
     * const travelIdea = await prisma.travelIdea.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TravelIdeaCreateManyArgs>(args?: SelectSubset<T, TravelIdeaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TravelIdeas and returns the data saved in the database.
     * @param {TravelIdeaCreateManyAndReturnArgs} args - Arguments to create many TravelIdeas.
     * @example
     * // Create many TravelIdeas
     * const travelIdea = await prisma.travelIdea.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TravelIdeas and only return the `id`
     * const travelIdeaWithIdOnly = await prisma.travelIdea.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TravelIdeaCreateManyAndReturnArgs>(args?: SelectSubset<T, TravelIdeaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a TravelIdea.
     * @param {TravelIdeaDeleteArgs} args - Arguments to delete one TravelIdea.
     * @example
     * // Delete one TravelIdea
     * const TravelIdea = await prisma.travelIdea.delete({
     *   where: {
     *     // ... filter to delete one TravelIdea
     *   }
     * })
     * 
     */
    delete<T extends TravelIdeaDeleteArgs>(args: SelectSubset<T, TravelIdeaDeleteArgs<ExtArgs>>): Prisma__TravelIdeaClient<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one TravelIdea.
     * @param {TravelIdeaUpdateArgs} args - Arguments to update one TravelIdea.
     * @example
     * // Update one TravelIdea
     * const travelIdea = await prisma.travelIdea.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TravelIdeaUpdateArgs>(args: SelectSubset<T, TravelIdeaUpdateArgs<ExtArgs>>): Prisma__TravelIdeaClient<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more TravelIdeas.
     * @param {TravelIdeaDeleteManyArgs} args - Arguments to filter TravelIdeas to delete.
     * @example
     * // Delete a few TravelIdeas
     * const { count } = await prisma.travelIdea.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TravelIdeaDeleteManyArgs>(args?: SelectSubset<T, TravelIdeaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TravelIdeas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelIdeaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TravelIdeas
     * const travelIdea = await prisma.travelIdea.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TravelIdeaUpdateManyArgs>(args: SelectSubset<T, TravelIdeaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TravelIdeas and returns the data updated in the database.
     * @param {TravelIdeaUpdateManyAndReturnArgs} args - Arguments to update many TravelIdeas.
     * @example
     * // Update many TravelIdeas
     * const travelIdea = await prisma.travelIdea.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TravelIdeas and only return the `id`
     * const travelIdeaWithIdOnly = await prisma.travelIdea.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TravelIdeaUpdateManyAndReturnArgs>(args: SelectSubset<T, TravelIdeaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one TravelIdea.
     * @param {TravelIdeaUpsertArgs} args - Arguments to update or create a TravelIdea.
     * @example
     * // Update or create a TravelIdea
     * const travelIdea = await prisma.travelIdea.upsert({
     *   create: {
     *     // ... data to create a TravelIdea
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TravelIdea we want to update
     *   }
     * })
     */
    upsert<T extends TravelIdeaUpsertArgs>(args: SelectSubset<T, TravelIdeaUpsertArgs<ExtArgs>>): Prisma__TravelIdeaClient<$Result.GetResult<Prisma.$TravelIdeaPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of TravelIdeas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelIdeaCountArgs} args - Arguments to filter TravelIdeas to count.
     * @example
     * // Count the number of TravelIdeas
     * const count = await prisma.travelIdea.count({
     *   where: {
     *     // ... the filter for the TravelIdeas we want to count
     *   }
     * })
    **/
    count<T extends TravelIdeaCountArgs>(
      args?: Subset<T, TravelIdeaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TravelIdeaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TravelIdea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelIdeaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TravelIdeaAggregateArgs>(args: Subset<T, TravelIdeaAggregateArgs>): Prisma.PrismaPromise<GetTravelIdeaAggregateType<T>>

    /**
     * Group by TravelIdea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelIdeaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TravelIdeaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TravelIdeaGroupByArgs['orderBy'] }
        : { orderBy?: TravelIdeaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TravelIdeaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTravelIdeaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TravelIdea model
   */
  readonly fields: TravelIdeaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TravelIdea.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TravelIdeaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foyer<T extends FoyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoyerDefaultArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    creator<T extends TravelIdea$creatorArgs<ExtArgs> = {}>(args?: Subset<T, TravelIdea$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TravelIdea model
   */ 
  interface TravelIdeaFieldRefs {
    readonly id: FieldRef<"TravelIdea", 'String'>
    readonly title: FieldRef<"TravelIdea", 'String'>
    readonly description: FieldRef<"TravelIdea", 'String'>
    readonly location: FieldRef<"TravelIdea", 'String'>
    readonly createdAt: FieldRef<"TravelIdea", 'DateTime'>
    readonly updatedAt: FieldRef<"TravelIdea", 'DateTime'>
    readonly votes: FieldRef<"TravelIdea", 'Int'>
    readonly foyerId: FieldRef<"TravelIdea", 'String'>
    readonly creatorId: FieldRef<"TravelIdea", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TravelIdea findUnique
   */
  export type TravelIdeaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * Filter, which TravelIdea to fetch.
     */
    where: TravelIdeaWhereUniqueInput
  }

  /**
   * TravelIdea findUniqueOrThrow
   */
  export type TravelIdeaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * Filter, which TravelIdea to fetch.
     */
    where: TravelIdeaWhereUniqueInput
  }

  /**
   * TravelIdea findFirst
   */
  export type TravelIdeaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * Filter, which TravelIdea to fetch.
     */
    where?: TravelIdeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelIdeas to fetch.
     */
    orderBy?: TravelIdeaOrderByWithRelationInput | TravelIdeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TravelIdeas.
     */
    cursor?: TravelIdeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelIdeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelIdeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TravelIdeas.
     */
    distinct?: TravelIdeaScalarFieldEnum | TravelIdeaScalarFieldEnum[]
  }

  /**
   * TravelIdea findFirstOrThrow
   */
  export type TravelIdeaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * Filter, which TravelIdea to fetch.
     */
    where?: TravelIdeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelIdeas to fetch.
     */
    orderBy?: TravelIdeaOrderByWithRelationInput | TravelIdeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TravelIdeas.
     */
    cursor?: TravelIdeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelIdeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelIdeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TravelIdeas.
     */
    distinct?: TravelIdeaScalarFieldEnum | TravelIdeaScalarFieldEnum[]
  }

  /**
   * TravelIdea findMany
   */
  export type TravelIdeaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * Filter, which TravelIdeas to fetch.
     */
    where?: TravelIdeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelIdeas to fetch.
     */
    orderBy?: TravelIdeaOrderByWithRelationInput | TravelIdeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TravelIdeas.
     */
    cursor?: TravelIdeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelIdeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelIdeas.
     */
    skip?: number
    distinct?: TravelIdeaScalarFieldEnum | TravelIdeaScalarFieldEnum[]
  }

  /**
   * TravelIdea create
   */
  export type TravelIdeaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * The data needed to create a TravelIdea.
     */
    data: XOR<TravelIdeaCreateInput, TravelIdeaUncheckedCreateInput>
  }

  /**
   * TravelIdea createMany
   */
  export type TravelIdeaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TravelIdeas.
     */
    data: TravelIdeaCreateManyInput | TravelIdeaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TravelIdea createManyAndReturn
   */
  export type TravelIdeaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * The data used to create many TravelIdeas.
     */
    data: TravelIdeaCreateManyInput | TravelIdeaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TravelIdea update
   */
  export type TravelIdeaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * The data needed to update a TravelIdea.
     */
    data: XOR<TravelIdeaUpdateInput, TravelIdeaUncheckedUpdateInput>
    /**
     * Choose, which TravelIdea to update.
     */
    where: TravelIdeaWhereUniqueInput
  }

  /**
   * TravelIdea updateMany
   */
  export type TravelIdeaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TravelIdeas.
     */
    data: XOR<TravelIdeaUpdateManyMutationInput, TravelIdeaUncheckedUpdateManyInput>
    /**
     * Filter which TravelIdeas to update
     */
    where?: TravelIdeaWhereInput
  }

  /**
   * TravelIdea updateManyAndReturn
   */
  export type TravelIdeaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * The data used to update TravelIdeas.
     */
    data: XOR<TravelIdeaUpdateManyMutationInput, TravelIdeaUncheckedUpdateManyInput>
    /**
     * Filter which TravelIdeas to update
     */
    where?: TravelIdeaWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TravelIdea upsert
   */
  export type TravelIdeaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * The filter to search for the TravelIdea to update in case it exists.
     */
    where: TravelIdeaWhereUniqueInput
    /**
     * In case the TravelIdea found by the `where` argument doesn't exist, create a new TravelIdea with this data.
     */
    create: XOR<TravelIdeaCreateInput, TravelIdeaUncheckedCreateInput>
    /**
     * In case the TravelIdea was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TravelIdeaUpdateInput, TravelIdeaUncheckedUpdateInput>
  }

  /**
   * TravelIdea delete
   */
  export type TravelIdeaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
    /**
     * Filter which TravelIdea to delete.
     */
    where: TravelIdeaWhereUniqueInput
  }

  /**
   * TravelIdea deleteMany
   */
  export type TravelIdeaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TravelIdeas to delete
     */
    where?: TravelIdeaWhereInput
  }

  /**
   * TravelIdea.creator
   */
  export type TravelIdea$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TravelIdea without action
   */
  export type TravelIdeaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelIdea
     */
    select?: TravelIdeaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelIdea
     */
    omit?: TravelIdeaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelIdeaInclude<ExtArgs> | null
  }


  /**
   * Model Recipe
   */

  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    votes: number | null
  }

  export type RecipeSumAggregateOutputType = {
    votes: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    ingredients: string | null
    instructions: string | null
    createdAt: Date | null
    updatedAt: Date | null
    votes: number | null
    foyerId: string | null
    creatorId: string | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    ingredients: string | null
    instructions: string | null
    createdAt: Date | null
    updatedAt: Date | null
    votes: number | null
    foyerId: string | null
    creatorId: string | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    title: number
    description: number
    ingredients: number
    instructions: number
    createdAt: number
    updatedAt: number
    votes: number
    foyerId: number
    creatorId: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    votes?: true
  }

  export type RecipeSumAggregateInputType = {
    votes?: true
  }

  export type RecipeMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ingredients?: true
    instructions?: true
    createdAt?: true
    updatedAt?: true
    votes?: true
    foyerId?: true
    creatorId?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ingredients?: true
    instructions?: true
    createdAt?: true
    updatedAt?: true
    votes?: true
    foyerId?: true
    creatorId?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ingredients?: true
    instructions?: true
    createdAt?: true
    updatedAt?: true
    votes?: true
    foyerId?: true
    creatorId?: true
    _all?: true
  }

  export type RecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipe to aggregate.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithAggregationInput | RecipeOrderByWithAggregationInput[]
    by: RecipeScalarFieldEnum[] | RecipeScalarFieldEnum
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }

  export type RecipeGroupByOutputType = {
    id: string
    title: string
    description: string | null
    ingredients: string | null
    instructions: string | null
    createdAt: Date
    updatedAt: Date
    votes: number
    foyerId: string
    creatorId: string | null
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    ingredients?: boolean
    instructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | Recipe$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    ingredients?: boolean
    instructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | Recipe$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    ingredients?: boolean
    instructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean
    foyerId?: boolean
    creatorId?: boolean
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | Recipe$creatorArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    ingredients?: boolean
    instructions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    votes?: boolean
    foyerId?: boolean
    creatorId?: boolean
  }

  export type RecipeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "ingredients" | "instructions" | "createdAt" | "updatedAt" | "votes" | "foyerId" | "creatorId", ExtArgs["result"]["recipe"]>
  export type RecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | Recipe$creatorArgs<ExtArgs>
  }
  export type RecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | Recipe$creatorArgs<ExtArgs>
  }
  export type RecipeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    foyer?: boolean | FoyerDefaultArgs<ExtArgs>
    creator?: boolean | Recipe$creatorArgs<ExtArgs>
  }

  export type $RecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recipe"
    objects: {
      foyer: Prisma.$FoyerPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      ingredients: string | null
      instructions: string | null
      createdAt: Date
      updatedAt: Date
      votes: number
      foyerId: string
      creatorId: string | null
    }, ExtArgs["result"]["recipe"]>
    composites: {}
  }

  type RecipeGetPayload<S extends boolean | null | undefined | RecipeDefaultArgs> = $Result.GetResult<Prisma.$RecipePayload, S>

  type RecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecipeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecipeCountAggregateInputType | true
    }

  export interface RecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipe'], meta: { name: 'Recipe' } }
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeFindUniqueArgs>(args: SelectSubset<T, RecipeFindUniqueArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Recipe that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeFindFirstArgs>(args?: SelectSubset<T, RecipeFindFirstArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Recipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeFindManyArgs>(args?: SelectSubset<T, RecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
     */
    create<T extends RecipeCreateArgs>(args: SelectSubset<T, RecipeCreateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Recipes.
     * @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeCreateManyArgs>(args?: SelectSubset<T, RecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recipes and returns the data saved in the database.
     * @param {RecipeCreateManyAndReturnArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
     */
    delete<T extends RecipeDeleteArgs>(args: SelectSubset<T, RecipeDeleteArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeUpdateArgs>(args: SelectSubset<T, RecipeUpdateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeDeleteManyArgs>(args?: SelectSubset<T, RecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeUpdateManyArgs>(args: SelectSubset<T, RecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes and returns the data updated in the database.
     * @param {RecipeUpdateManyAndReturnArgs} args - Arguments to update many Recipes.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecipeUpdateManyAndReturnArgs>(args: SelectSubset<T, RecipeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
     */
    upsert<T extends RecipeUpsertArgs>(args: SelectSubset<T, RecipeUpsertArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): Prisma.PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipe model
   */
  readonly fields: RecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    foyer<T extends FoyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoyerDefaultArgs<ExtArgs>>): Prisma__FoyerClient<$Result.GetResult<Prisma.$FoyerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    creator<T extends Recipe$creatorArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$creatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recipe model
   */ 
  interface RecipeFieldRefs {
    readonly id: FieldRef<"Recipe", 'String'>
    readonly title: FieldRef<"Recipe", 'String'>
    readonly description: FieldRef<"Recipe", 'String'>
    readonly ingredients: FieldRef<"Recipe", 'String'>
    readonly instructions: FieldRef<"Recipe", 'String'>
    readonly createdAt: FieldRef<"Recipe", 'DateTime'>
    readonly updatedAt: FieldRef<"Recipe", 'DateTime'>
    readonly votes: FieldRef<"Recipe", 'Int'>
    readonly foyerId: FieldRef<"Recipe", 'String'>
    readonly creatorId: FieldRef<"Recipe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Recipe findUnique
   */
  export type RecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findFirst
   */
  export type RecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe create
   */
  export type RecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Recipe.
     */
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }

  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recipe createManyAndReturn
   */
  export type RecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recipe update
   */
  export type RecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Recipe.
     */
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
  }

  /**
   * Recipe updateManyAndReturn
   */
  export type RecipeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     */
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     */
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }

  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter which Recipe to delete.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to delete
     */
    where?: RecipeWhereInput
  }

  /**
   * Recipe.creator
   */
  export type Recipe$creatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Recipe without action
   */
  export type RecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recipe
     */
    omit?: RecipeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FoyerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    rule: 'rule',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoyerScalarFieldEnum = (typeof FoyerScalarFieldEnum)[keyof typeof FoyerScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    foyerId: 'foyerId',
    acceptedFoyerRuleAt: 'acceptedFoyerRuleAt',
    points: 'points',
    pushToken: 'pushToken'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    completed: 'completed',
    points: 'points',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    foyerId: 'foyerId',
    assignedToId: 'assignedToId'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const CalendarEventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    recurrence: 'recurrence',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    foyerId: 'foyerId',
    creatorId: 'creatorId'
  };

  export type CalendarEventScalarFieldEnum = (typeof CalendarEventScalarFieldEnum)[keyof typeof CalendarEventScalarFieldEnum]


  export const ShoppingItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    quantity: 'quantity',
    purchased: 'purchased',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    foyerId: 'foyerId',
    assignedToId: 'assignedToId',
    addedById: 'addedById'
  };

  export type ShoppingItemScalarFieldEnum = (typeof ShoppingItemScalarFieldEnum)[keyof typeof ShoppingItemScalarFieldEnum]


  export const TravelIdeaScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    location: 'location',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    votes: 'votes',
    foyerId: 'foyerId',
    creatorId: 'creatorId'
  };

  export type TravelIdeaScalarFieldEnum = (typeof TravelIdeaScalarFieldEnum)[keyof typeof TravelIdeaScalarFieldEnum]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    ingredients: 'ingredients',
    instructions: 'instructions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    votes: 'votes',
    foyerId: 'foyerId',
    creatorId: 'creatorId'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type FoyerWhereInput = {
    AND?: FoyerWhereInput | FoyerWhereInput[]
    OR?: FoyerWhereInput[]
    NOT?: FoyerWhereInput | FoyerWhereInput[]
    id?: StringFilter<"Foyer"> | string
    name?: StringFilter<"Foyer"> | string
    code?: StringFilter<"Foyer"> | string
    rule?: StringFilter<"Foyer"> | string
    createdAt?: DateTimeFilter<"Foyer"> | Date | string
    updatedAt?: DateTimeFilter<"Foyer"> | Date | string
    members?: UserListRelationFilter
    calendarEvents?: CalendarEventListRelationFilter
    tasks?: TaskListRelationFilter
    shoppingItems?: ShoppingItemListRelationFilter
    travelIdeas?: TravelIdeaListRelationFilter
    recipes?: RecipeListRelationFilter
  }

  export type FoyerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    rule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: UserOrderByRelationAggregateInput
    calendarEvents?: CalendarEventOrderByRelationAggregateInput
    tasks?: TaskOrderByRelationAggregateInput
    shoppingItems?: ShoppingItemOrderByRelationAggregateInput
    travelIdeas?: TravelIdeaOrderByRelationAggregateInput
    recipes?: RecipeOrderByRelationAggregateInput
  }

  export type FoyerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: FoyerWhereInput | FoyerWhereInput[]
    OR?: FoyerWhereInput[]
    NOT?: FoyerWhereInput | FoyerWhereInput[]
    name?: StringFilter<"Foyer"> | string
    rule?: StringFilter<"Foyer"> | string
    createdAt?: DateTimeFilter<"Foyer"> | Date | string
    updatedAt?: DateTimeFilter<"Foyer"> | Date | string
    members?: UserListRelationFilter
    calendarEvents?: CalendarEventListRelationFilter
    tasks?: TaskListRelationFilter
    shoppingItems?: ShoppingItemListRelationFilter
    travelIdeas?: TravelIdeaListRelationFilter
    recipes?: RecipeListRelationFilter
  }, "id" | "code">

  export type FoyerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    rule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoyerCountOrderByAggregateInput
    _max?: FoyerMaxOrderByAggregateInput
    _min?: FoyerMinOrderByAggregateInput
  }

  export type FoyerScalarWhereWithAggregatesInput = {
    AND?: FoyerScalarWhereWithAggregatesInput | FoyerScalarWhereWithAggregatesInput[]
    OR?: FoyerScalarWhereWithAggregatesInput[]
    NOT?: FoyerScalarWhereWithAggregatesInput | FoyerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Foyer"> | string
    name?: StringWithAggregatesFilter<"Foyer"> | string
    code?: StringWithAggregatesFilter<"Foyer"> | string
    rule?: StringWithAggregatesFilter<"Foyer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Foyer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Foyer"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    foyerId?: StringNullableFilter<"User"> | string | null
    acceptedFoyerRuleAt?: DateTimeNullableFilter<"User"> | Date | string | null
    points?: IntFilter<"User"> | number
    pushToken?: StringNullableFilter<"User"> | string | null
    foyer?: XOR<FoyerNullableScalarRelationFilter, FoyerWhereInput> | null
    createdEvents?: CalendarEventListRelationFilter
    assignedTasks?: TaskListRelationFilter
    createdTravelIdeas?: TravelIdeaListRelationFilter
    assignedShoppings?: ShoppingItemListRelationFilter
    addedShoppings?: ShoppingItemListRelationFilter
    createdRecipes?: RecipeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrderInput | SortOrder
    acceptedFoyerRuleAt?: SortOrderInput | SortOrder
    points?: SortOrder
    pushToken?: SortOrderInput | SortOrder
    foyer?: FoyerOrderByWithRelationInput
    createdEvents?: CalendarEventOrderByRelationAggregateInput
    assignedTasks?: TaskOrderByRelationAggregateInput
    createdTravelIdeas?: TravelIdeaOrderByRelationAggregateInput
    assignedShoppings?: ShoppingItemOrderByRelationAggregateInput
    addedShoppings?: ShoppingItemOrderByRelationAggregateInput
    createdRecipes?: RecipeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    foyerId?: StringNullableFilter<"User"> | string | null
    acceptedFoyerRuleAt?: DateTimeNullableFilter<"User"> | Date | string | null
    points?: IntFilter<"User"> | number
    pushToken?: StringNullableFilter<"User"> | string | null
    foyer?: XOR<FoyerNullableScalarRelationFilter, FoyerWhereInput> | null
    createdEvents?: CalendarEventListRelationFilter
    assignedTasks?: TaskListRelationFilter
    createdTravelIdeas?: TravelIdeaListRelationFilter
    assignedShoppings?: ShoppingItemListRelationFilter
    addedShoppings?: ShoppingItemListRelationFilter
    createdRecipes?: RecipeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrderInput | SortOrder
    acceptedFoyerRuleAt?: SortOrderInput | SortOrder
    points?: SortOrder
    pushToken?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    foyerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    acceptedFoyerRuleAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    points?: IntWithAggregatesFilter<"User"> | number
    pushToken?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    completed?: BoolFilter<"Task"> | boolean
    points?: IntFilter<"Task"> | number
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    foyerId?: StringFilter<"Task"> | string
    assignedToId?: StringNullableFilter<"Task"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    completed?: SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    foyer?: FoyerOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    completed?: BoolFilter<"Task"> | boolean
    points?: IntFilter<"Task"> | number
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    foyerId?: StringFilter<"Task"> | string
    assignedToId?: StringNullableFilter<"Task"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    completed?: SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    completed?: BoolWithAggregatesFilter<"Task"> | boolean
    points?: IntWithAggregatesFilter<"Task"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    foyerId?: StringWithAggregatesFilter<"Task"> | string
    assignedToId?: StringNullableWithAggregatesFilter<"Task"> | string | null
  }

  export type CalendarEventWhereInput = {
    AND?: CalendarEventWhereInput | CalendarEventWhereInput[]
    OR?: CalendarEventWhereInput[]
    NOT?: CalendarEventWhereInput | CalendarEventWhereInput[]
    id?: StringFilter<"CalendarEvent"> | string
    title?: StringFilter<"CalendarEvent"> | string
    description?: StringNullableFilter<"CalendarEvent"> | string | null
    startDate?: DateTimeFilter<"CalendarEvent"> | Date | string
    endDate?: DateTimeFilter<"CalendarEvent"> | Date | string
    recurrence?: StringFilter<"CalendarEvent"> | string
    createdAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    updatedAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    foyerId?: StringFilter<"CalendarEvent"> | string
    creatorId?: StringNullableFilter<"CalendarEvent"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type CalendarEventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    recurrence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    foyer?: FoyerOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type CalendarEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CalendarEventWhereInput | CalendarEventWhereInput[]
    OR?: CalendarEventWhereInput[]
    NOT?: CalendarEventWhereInput | CalendarEventWhereInput[]
    title?: StringFilter<"CalendarEvent"> | string
    description?: StringNullableFilter<"CalendarEvent"> | string | null
    startDate?: DateTimeFilter<"CalendarEvent"> | Date | string
    endDate?: DateTimeFilter<"CalendarEvent"> | Date | string
    recurrence?: StringFilter<"CalendarEvent"> | string
    createdAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    updatedAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    foyerId?: StringFilter<"CalendarEvent"> | string
    creatorId?: StringNullableFilter<"CalendarEvent"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type CalendarEventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    recurrence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    _count?: CalendarEventCountOrderByAggregateInput
    _max?: CalendarEventMaxOrderByAggregateInput
    _min?: CalendarEventMinOrderByAggregateInput
  }

  export type CalendarEventScalarWhereWithAggregatesInput = {
    AND?: CalendarEventScalarWhereWithAggregatesInput | CalendarEventScalarWhereWithAggregatesInput[]
    OR?: CalendarEventScalarWhereWithAggregatesInput[]
    NOT?: CalendarEventScalarWhereWithAggregatesInput | CalendarEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CalendarEvent"> | string
    title?: StringWithAggregatesFilter<"CalendarEvent"> | string
    description?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string
    recurrence?: StringWithAggregatesFilter<"CalendarEvent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CalendarEvent"> | Date | string
    foyerId?: StringWithAggregatesFilter<"CalendarEvent"> | string
    creatorId?: StringNullableWithAggregatesFilter<"CalendarEvent"> | string | null
  }

  export type ShoppingItemWhereInput = {
    AND?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    OR?: ShoppingItemWhereInput[]
    NOT?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    id?: StringFilter<"ShoppingItem"> | string
    name?: StringFilter<"ShoppingItem"> | string
    quantity?: StringNullableFilter<"ShoppingItem"> | string | null
    purchased?: BoolFilter<"ShoppingItem"> | boolean
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    foyerId?: StringFilter<"ShoppingItem"> | string
    assignedToId?: StringNullableFilter<"ShoppingItem"> | string | null
    addedById?: StringNullableFilter<"ShoppingItem"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    addedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ShoppingItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrderInput | SortOrder
    purchased?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    addedById?: SortOrderInput | SortOrder
    foyer?: FoyerOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    addedBy?: UserOrderByWithRelationInput
  }

  export type ShoppingItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    OR?: ShoppingItemWhereInput[]
    NOT?: ShoppingItemWhereInput | ShoppingItemWhereInput[]
    name?: StringFilter<"ShoppingItem"> | string
    quantity?: StringNullableFilter<"ShoppingItem"> | string | null
    purchased?: BoolFilter<"ShoppingItem"> | boolean
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    foyerId?: StringFilter<"ShoppingItem"> | string
    assignedToId?: StringNullableFilter<"ShoppingItem"> | string | null
    addedById?: StringNullableFilter<"ShoppingItem"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    addedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ShoppingItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrderInput | SortOrder
    purchased?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    addedById?: SortOrderInput | SortOrder
    _count?: ShoppingItemCountOrderByAggregateInput
    _max?: ShoppingItemMaxOrderByAggregateInput
    _min?: ShoppingItemMinOrderByAggregateInput
  }

  export type ShoppingItemScalarWhereWithAggregatesInput = {
    AND?: ShoppingItemScalarWhereWithAggregatesInput | ShoppingItemScalarWhereWithAggregatesInput[]
    OR?: ShoppingItemScalarWhereWithAggregatesInput[]
    NOT?: ShoppingItemScalarWhereWithAggregatesInput | ShoppingItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShoppingItem"> | string
    name?: StringWithAggregatesFilter<"ShoppingItem"> | string
    quantity?: StringNullableWithAggregatesFilter<"ShoppingItem"> | string | null
    purchased?: BoolWithAggregatesFilter<"ShoppingItem"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShoppingItem"> | Date | string
    foyerId?: StringWithAggregatesFilter<"ShoppingItem"> | string
    assignedToId?: StringNullableWithAggregatesFilter<"ShoppingItem"> | string | null
    addedById?: StringNullableWithAggregatesFilter<"ShoppingItem"> | string | null
  }

  export type TravelIdeaWhereInput = {
    AND?: TravelIdeaWhereInput | TravelIdeaWhereInput[]
    OR?: TravelIdeaWhereInput[]
    NOT?: TravelIdeaWhereInput | TravelIdeaWhereInput[]
    id?: StringFilter<"TravelIdea"> | string
    title?: StringFilter<"TravelIdea"> | string
    description?: StringNullableFilter<"TravelIdea"> | string | null
    location?: StringNullableFilter<"TravelIdea"> | string | null
    createdAt?: DateTimeFilter<"TravelIdea"> | Date | string
    updatedAt?: DateTimeFilter<"TravelIdea"> | Date | string
    votes?: IntFilter<"TravelIdea"> | number
    foyerId?: StringFilter<"TravelIdea"> | string
    creatorId?: StringNullableFilter<"TravelIdea"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type TravelIdeaOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    foyer?: FoyerOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type TravelIdeaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TravelIdeaWhereInput | TravelIdeaWhereInput[]
    OR?: TravelIdeaWhereInput[]
    NOT?: TravelIdeaWhereInput | TravelIdeaWhereInput[]
    title?: StringFilter<"TravelIdea"> | string
    description?: StringNullableFilter<"TravelIdea"> | string | null
    location?: StringNullableFilter<"TravelIdea"> | string | null
    createdAt?: DateTimeFilter<"TravelIdea"> | Date | string
    updatedAt?: DateTimeFilter<"TravelIdea"> | Date | string
    votes?: IntFilter<"TravelIdea"> | number
    foyerId?: StringFilter<"TravelIdea"> | string
    creatorId?: StringNullableFilter<"TravelIdea"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type TravelIdeaOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    _count?: TravelIdeaCountOrderByAggregateInput
    _avg?: TravelIdeaAvgOrderByAggregateInput
    _max?: TravelIdeaMaxOrderByAggregateInput
    _min?: TravelIdeaMinOrderByAggregateInput
    _sum?: TravelIdeaSumOrderByAggregateInput
  }

  export type TravelIdeaScalarWhereWithAggregatesInput = {
    AND?: TravelIdeaScalarWhereWithAggregatesInput | TravelIdeaScalarWhereWithAggregatesInput[]
    OR?: TravelIdeaScalarWhereWithAggregatesInput[]
    NOT?: TravelIdeaScalarWhereWithAggregatesInput | TravelIdeaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TravelIdea"> | string
    title?: StringWithAggregatesFilter<"TravelIdea"> | string
    description?: StringNullableWithAggregatesFilter<"TravelIdea"> | string | null
    location?: StringNullableWithAggregatesFilter<"TravelIdea"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TravelIdea"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TravelIdea"> | Date | string
    votes?: IntWithAggregatesFilter<"TravelIdea"> | number
    foyerId?: StringWithAggregatesFilter<"TravelIdea"> | string
    creatorId?: StringNullableWithAggregatesFilter<"TravelIdea"> | string | null
  }

  export type RecipeWhereInput = {
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    id?: StringFilter<"Recipe"> | string
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    ingredients?: StringNullableFilter<"Recipe"> | string | null
    instructions?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    votes?: IntFilter<"Recipe"> | number
    foyerId?: StringFilter<"Recipe"> | string
    creatorId?: StringNullableFilter<"Recipe"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    ingredients?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    foyer?: FoyerOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
  }

  export type RecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    ingredients?: StringNullableFilter<"Recipe"> | string | null
    instructions?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    votes?: IntFilter<"Recipe"> | number
    foyerId?: StringFilter<"Recipe"> | string
    creatorId?: StringNullableFilter<"Recipe"> | string | null
    foyer?: XOR<FoyerScalarRelationFilter, FoyerWhereInput>
    creator?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    ingredients?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrderInput | SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _avg?: RecipeAvgOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
    _sum?: RecipeSumOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    OR?: RecipeScalarWhereWithAggregatesInput[]
    NOT?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipe"> | string
    title?: StringWithAggregatesFilter<"Recipe"> | string
    description?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    ingredients?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    instructions?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    votes?: IntWithAggregatesFilter<"Recipe"> | number
    foyerId?: StringWithAggregatesFilter<"Recipe"> | string
    creatorId?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
  }

  export type FoyerCreateInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutFoyerInput
    tasks?: TaskCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaCreateNestedManyWithoutFoyerInput
    recipes?: RecipeCreateNestedManyWithoutFoyerInput
  }

  export type FoyerUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutFoyerInput
    tasks?: TaskUncheckedCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutFoyerInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutFoyerInput
  }

  export type FoyerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUpdateManyWithoutFoyerNestedInput
  }

  export type FoyerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUncheckedUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutFoyerNestedInput
  }

  export type FoyerCreateManyInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoyerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoyerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    foyer?: FoyerCreateNestedOneWithoutMembersInput
    createdEvents?: CalendarEventCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId?: string | null
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    createdEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    foyer?: FoyerUpdateOneWithoutMembersNestedInput
    createdEvents?: CalendarEventUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdEvents?: CalendarEventUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUncheckedUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId?: string | null
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    foyer: FoyerCreateNestedOneWithoutTasksInput
    assignedTo?: UserCreateNestedOneWithoutAssignedTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    assignedToId?: string | null
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyer?: FoyerUpdateOneRequiredWithoutTasksNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    assignedToId?: string | null
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventCreateInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foyer: FoyerCreateNestedOneWithoutCalendarEventsInput
    creator?: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type CalendarEventUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    creatorId?: string | null
  }

  export type CalendarEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyer?: FoyerUpdateOneRequiredWithoutCalendarEventsNestedInput
    creator?: UserUpdateOneWithoutCreatedEventsNestedInput
  }

  export type CalendarEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    creatorId?: string | null
  }

  export type CalendarEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingItemCreateInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyer: FoyerCreateNestedOneWithoutShoppingItemsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedShoppingsInput
    addedBy?: UserCreateNestedOneWithoutAddedShoppingsInput
  }

  export type ShoppingItemUncheckedCreateInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    assignedToId?: string | null
    addedById?: string | null
  }

  export type ShoppingItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyer?: FoyerUpdateOneRequiredWithoutShoppingItemsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedShoppingsNestedInput
    addedBy?: UserUpdateOneWithoutAddedShoppingsNestedInput
  }

  export type ShoppingItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingItemCreateManyInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    assignedToId?: string | null
    addedById?: string | null
  }

  export type ShoppingItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShoppingItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TravelIdeaCreateInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyer: FoyerCreateNestedOneWithoutTravelIdeasInput
    creator?: UserCreateNestedOneWithoutCreatedTravelIdeasInput
  }

  export type TravelIdeaUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyerId: string
    creatorId?: string | null
  }

  export type TravelIdeaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyer?: FoyerUpdateOneRequiredWithoutTravelIdeasNestedInput
    creator?: UserUpdateOneWithoutCreatedTravelIdeasNestedInput
  }

  export type TravelIdeaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyerId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TravelIdeaCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyerId: string
    creatorId?: string | null
  }

  export type TravelIdeaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
  }

  export type TravelIdeaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyerId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeCreateInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyer: FoyerCreateNestedOneWithoutRecipesInput
    creator?: UserCreateNestedOneWithoutCreatedRecipesInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyerId: string
    creatorId?: string | null
  }

  export type RecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyer?: FoyerUpdateOneRequiredWithoutRecipesNestedInput
    creator?: UserUpdateOneWithoutCreatedRecipesNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyerId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyerId: string
    creatorId?: string | null
  }

  export type RecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyerId?: StringFieldUpdateOperationsInput | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CalendarEventListRelationFilter = {
    every?: CalendarEventWhereInput
    some?: CalendarEventWhereInput
    none?: CalendarEventWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type ShoppingItemListRelationFilter = {
    every?: ShoppingItemWhereInput
    some?: ShoppingItemWhereInput
    none?: ShoppingItemWhereInput
  }

  export type TravelIdeaListRelationFilter = {
    every?: TravelIdeaWhereInput
    some?: TravelIdeaWhereInput
    none?: TravelIdeaWhereInput
  }

  export type RecipeListRelationFilter = {
    every?: RecipeWhereInput
    some?: RecipeWhereInput
    none?: RecipeWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CalendarEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShoppingItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TravelIdeaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FoyerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    rule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoyerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    rule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoyerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    rule?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FoyerNullableScalarRelationFilter = {
    is?: FoyerWhereInput | null
    isNot?: FoyerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    acceptedFoyerRuleAt?: SortOrder
    points?: SortOrder
    pushToken?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    acceptedFoyerRuleAt?: SortOrder
    points?: SortOrder
    pushToken?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    acceptedFoyerRuleAt?: SortOrder
    points?: SortOrder
    pushToken?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FoyerScalarRelationFilter = {
    is?: FoyerWhereInput
    isNot?: FoyerWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    completed?: SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    completed?: SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    completed?: SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CalendarEventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    recurrence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type CalendarEventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    recurrence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type CalendarEventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    recurrence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type ShoppingItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    purchased?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrder
    addedById?: SortOrder
  }

  export type ShoppingItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    purchased?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrder
    addedById?: SortOrder
  }

  export type ShoppingItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    purchased?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    foyerId?: SortOrder
    assignedToId?: SortOrder
    addedById?: SortOrder
  }

  export type TravelIdeaCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type TravelIdeaAvgOrderByAggregateInput = {
    votes?: SortOrder
  }

  export type TravelIdeaMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type TravelIdeaMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type TravelIdeaSumOrderByAggregateInput = {
    votes?: SortOrder
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type RecipeAvgOrderByAggregateInput = {
    votes?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    instructions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    votes?: SortOrder
    foyerId?: SortOrder
    creatorId?: SortOrder
  }

  export type RecipeSumOrderByAggregateInput = {
    votes?: SortOrder
  }

  export type UserCreateNestedManyWithoutFoyerInput = {
    create?: XOR<UserCreateWithoutFoyerInput, UserUncheckedCreateWithoutFoyerInput> | UserCreateWithoutFoyerInput[] | UserUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFoyerInput | UserCreateOrConnectWithoutFoyerInput[]
    createMany?: UserCreateManyFoyerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CalendarEventCreateNestedManyWithoutFoyerInput = {
    create?: XOR<CalendarEventCreateWithoutFoyerInput, CalendarEventUncheckedCreateWithoutFoyerInput> | CalendarEventCreateWithoutFoyerInput[] | CalendarEventUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutFoyerInput | CalendarEventCreateOrConnectWithoutFoyerInput[]
    createMany?: CalendarEventCreateManyFoyerInputEnvelope
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutFoyerInput = {
    create?: XOR<TaskCreateWithoutFoyerInput, TaskUncheckedCreateWithoutFoyerInput> | TaskCreateWithoutFoyerInput[] | TaskUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutFoyerInput | TaskCreateOrConnectWithoutFoyerInput[]
    createMany?: TaskCreateManyFoyerInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ShoppingItemCreateNestedManyWithoutFoyerInput = {
    create?: XOR<ShoppingItemCreateWithoutFoyerInput, ShoppingItemUncheckedCreateWithoutFoyerInput> | ShoppingItemCreateWithoutFoyerInput[] | ShoppingItemUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutFoyerInput | ShoppingItemCreateOrConnectWithoutFoyerInput[]
    createMany?: ShoppingItemCreateManyFoyerInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type TravelIdeaCreateNestedManyWithoutFoyerInput = {
    create?: XOR<TravelIdeaCreateWithoutFoyerInput, TravelIdeaUncheckedCreateWithoutFoyerInput> | TravelIdeaCreateWithoutFoyerInput[] | TravelIdeaUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: TravelIdeaCreateOrConnectWithoutFoyerInput | TravelIdeaCreateOrConnectWithoutFoyerInput[]
    createMany?: TravelIdeaCreateManyFoyerInputEnvelope
    connect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
  }

  export type RecipeCreateNestedManyWithoutFoyerInput = {
    create?: XOR<RecipeCreateWithoutFoyerInput, RecipeUncheckedCreateWithoutFoyerInput> | RecipeCreateWithoutFoyerInput[] | RecipeUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutFoyerInput | RecipeCreateOrConnectWithoutFoyerInput[]
    createMany?: RecipeCreateManyFoyerInputEnvelope
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutFoyerInput = {
    create?: XOR<UserCreateWithoutFoyerInput, UserUncheckedCreateWithoutFoyerInput> | UserCreateWithoutFoyerInput[] | UserUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFoyerInput | UserCreateOrConnectWithoutFoyerInput[]
    createMany?: UserCreateManyFoyerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CalendarEventUncheckedCreateNestedManyWithoutFoyerInput = {
    create?: XOR<CalendarEventCreateWithoutFoyerInput, CalendarEventUncheckedCreateWithoutFoyerInput> | CalendarEventCreateWithoutFoyerInput[] | CalendarEventUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutFoyerInput | CalendarEventCreateOrConnectWithoutFoyerInput[]
    createMany?: CalendarEventCreateManyFoyerInputEnvelope
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutFoyerInput = {
    create?: XOR<TaskCreateWithoutFoyerInput, TaskUncheckedCreateWithoutFoyerInput> | TaskCreateWithoutFoyerInput[] | TaskUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutFoyerInput | TaskCreateOrConnectWithoutFoyerInput[]
    createMany?: TaskCreateManyFoyerInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ShoppingItemUncheckedCreateNestedManyWithoutFoyerInput = {
    create?: XOR<ShoppingItemCreateWithoutFoyerInput, ShoppingItemUncheckedCreateWithoutFoyerInput> | ShoppingItemCreateWithoutFoyerInput[] | ShoppingItemUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutFoyerInput | ShoppingItemCreateOrConnectWithoutFoyerInput[]
    createMany?: ShoppingItemCreateManyFoyerInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type TravelIdeaUncheckedCreateNestedManyWithoutFoyerInput = {
    create?: XOR<TravelIdeaCreateWithoutFoyerInput, TravelIdeaUncheckedCreateWithoutFoyerInput> | TravelIdeaCreateWithoutFoyerInput[] | TravelIdeaUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: TravelIdeaCreateOrConnectWithoutFoyerInput | TravelIdeaCreateOrConnectWithoutFoyerInput[]
    createMany?: TravelIdeaCreateManyFoyerInputEnvelope
    connect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
  }

  export type RecipeUncheckedCreateNestedManyWithoutFoyerInput = {
    create?: XOR<RecipeCreateWithoutFoyerInput, RecipeUncheckedCreateWithoutFoyerInput> | RecipeCreateWithoutFoyerInput[] | RecipeUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutFoyerInput | RecipeCreateOrConnectWithoutFoyerInput[]
    createMany?: RecipeCreateManyFoyerInputEnvelope
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<UserCreateWithoutFoyerInput, UserUncheckedCreateWithoutFoyerInput> | UserCreateWithoutFoyerInput[] | UserUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFoyerInput | UserCreateOrConnectWithoutFoyerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFoyerInput | UserUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: UserCreateManyFoyerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFoyerInput | UserUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFoyerInput | UserUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CalendarEventUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<CalendarEventCreateWithoutFoyerInput, CalendarEventUncheckedCreateWithoutFoyerInput> | CalendarEventCreateWithoutFoyerInput[] | CalendarEventUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutFoyerInput | CalendarEventCreateOrConnectWithoutFoyerInput[]
    upsert?: CalendarEventUpsertWithWhereUniqueWithoutFoyerInput | CalendarEventUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: CalendarEventCreateManyFoyerInputEnvelope
    set?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    disconnect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    delete?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    update?: CalendarEventUpdateWithWhereUniqueWithoutFoyerInput | CalendarEventUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: CalendarEventUpdateManyWithWhereWithoutFoyerInput | CalendarEventUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<TaskCreateWithoutFoyerInput, TaskUncheckedCreateWithoutFoyerInput> | TaskCreateWithoutFoyerInput[] | TaskUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutFoyerInput | TaskCreateOrConnectWithoutFoyerInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutFoyerInput | TaskUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: TaskCreateManyFoyerInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutFoyerInput | TaskUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutFoyerInput | TaskUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ShoppingItemUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutFoyerInput, ShoppingItemUncheckedCreateWithoutFoyerInput> | ShoppingItemCreateWithoutFoyerInput[] | ShoppingItemUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutFoyerInput | ShoppingItemCreateOrConnectWithoutFoyerInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutFoyerInput | ShoppingItemUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: ShoppingItemCreateManyFoyerInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutFoyerInput | ShoppingItemUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutFoyerInput | ShoppingItemUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type TravelIdeaUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<TravelIdeaCreateWithoutFoyerInput, TravelIdeaUncheckedCreateWithoutFoyerInput> | TravelIdeaCreateWithoutFoyerInput[] | TravelIdeaUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: TravelIdeaCreateOrConnectWithoutFoyerInput | TravelIdeaCreateOrConnectWithoutFoyerInput[]
    upsert?: TravelIdeaUpsertWithWhereUniqueWithoutFoyerInput | TravelIdeaUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: TravelIdeaCreateManyFoyerInputEnvelope
    set?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    disconnect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    delete?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    connect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    update?: TravelIdeaUpdateWithWhereUniqueWithoutFoyerInput | TravelIdeaUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: TravelIdeaUpdateManyWithWhereWithoutFoyerInput | TravelIdeaUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: TravelIdeaScalarWhereInput | TravelIdeaScalarWhereInput[]
  }

  export type RecipeUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<RecipeCreateWithoutFoyerInput, RecipeUncheckedCreateWithoutFoyerInput> | RecipeCreateWithoutFoyerInput[] | RecipeUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutFoyerInput | RecipeCreateOrConnectWithoutFoyerInput[]
    upsert?: RecipeUpsertWithWhereUniqueWithoutFoyerInput | RecipeUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: RecipeCreateManyFoyerInputEnvelope
    set?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    disconnect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    delete?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    update?: RecipeUpdateWithWhereUniqueWithoutFoyerInput | RecipeUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: RecipeUpdateManyWithWhereWithoutFoyerInput | RecipeUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<UserCreateWithoutFoyerInput, UserUncheckedCreateWithoutFoyerInput> | UserCreateWithoutFoyerInput[] | UserUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFoyerInput | UserCreateOrConnectWithoutFoyerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFoyerInput | UserUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: UserCreateManyFoyerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFoyerInput | UserUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFoyerInput | UserUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CalendarEventUncheckedUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<CalendarEventCreateWithoutFoyerInput, CalendarEventUncheckedCreateWithoutFoyerInput> | CalendarEventCreateWithoutFoyerInput[] | CalendarEventUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutFoyerInput | CalendarEventCreateOrConnectWithoutFoyerInput[]
    upsert?: CalendarEventUpsertWithWhereUniqueWithoutFoyerInput | CalendarEventUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: CalendarEventCreateManyFoyerInputEnvelope
    set?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    disconnect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    delete?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    update?: CalendarEventUpdateWithWhereUniqueWithoutFoyerInput | CalendarEventUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: CalendarEventUpdateManyWithWhereWithoutFoyerInput | CalendarEventUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<TaskCreateWithoutFoyerInput, TaskUncheckedCreateWithoutFoyerInput> | TaskCreateWithoutFoyerInput[] | TaskUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutFoyerInput | TaskCreateOrConnectWithoutFoyerInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutFoyerInput | TaskUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: TaskCreateManyFoyerInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutFoyerInput | TaskUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutFoyerInput | TaskUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ShoppingItemUncheckedUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutFoyerInput, ShoppingItemUncheckedCreateWithoutFoyerInput> | ShoppingItemCreateWithoutFoyerInput[] | ShoppingItemUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutFoyerInput | ShoppingItemCreateOrConnectWithoutFoyerInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutFoyerInput | ShoppingItemUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: ShoppingItemCreateManyFoyerInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutFoyerInput | ShoppingItemUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutFoyerInput | ShoppingItemUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type TravelIdeaUncheckedUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<TravelIdeaCreateWithoutFoyerInput, TravelIdeaUncheckedCreateWithoutFoyerInput> | TravelIdeaCreateWithoutFoyerInput[] | TravelIdeaUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: TravelIdeaCreateOrConnectWithoutFoyerInput | TravelIdeaCreateOrConnectWithoutFoyerInput[]
    upsert?: TravelIdeaUpsertWithWhereUniqueWithoutFoyerInput | TravelIdeaUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: TravelIdeaCreateManyFoyerInputEnvelope
    set?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    disconnect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    delete?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    connect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    update?: TravelIdeaUpdateWithWhereUniqueWithoutFoyerInput | TravelIdeaUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: TravelIdeaUpdateManyWithWhereWithoutFoyerInput | TravelIdeaUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: TravelIdeaScalarWhereInput | TravelIdeaScalarWhereInput[]
  }

  export type RecipeUncheckedUpdateManyWithoutFoyerNestedInput = {
    create?: XOR<RecipeCreateWithoutFoyerInput, RecipeUncheckedCreateWithoutFoyerInput> | RecipeCreateWithoutFoyerInput[] | RecipeUncheckedCreateWithoutFoyerInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutFoyerInput | RecipeCreateOrConnectWithoutFoyerInput[]
    upsert?: RecipeUpsertWithWhereUniqueWithoutFoyerInput | RecipeUpsertWithWhereUniqueWithoutFoyerInput[]
    createMany?: RecipeCreateManyFoyerInputEnvelope
    set?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    disconnect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    delete?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    update?: RecipeUpdateWithWhereUniqueWithoutFoyerInput | RecipeUpdateWithWhereUniqueWithoutFoyerInput[]
    updateMany?: RecipeUpdateManyWithWhereWithoutFoyerInput | RecipeUpdateManyWithWhereWithoutFoyerInput[]
    deleteMany?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
  }

  export type FoyerCreateNestedOneWithoutMembersInput = {
    create?: XOR<FoyerCreateWithoutMembersInput, FoyerUncheckedCreateWithoutMembersInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutMembersInput
    connect?: FoyerWhereUniqueInput
  }

  export type CalendarEventCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CalendarEventCreateWithoutCreatorInput, CalendarEventUncheckedCreateWithoutCreatorInput> | CalendarEventCreateWithoutCreatorInput[] | CalendarEventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutCreatorInput | CalendarEventCreateOrConnectWithoutCreatorInput[]
    createMany?: CalendarEventCreateManyCreatorInputEnvelope
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<TaskCreateWithoutAssignedToInput, TaskUncheckedCreateWithoutAssignedToInput> | TaskCreateWithoutAssignedToInput[] | TaskUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssignedToInput | TaskCreateOrConnectWithoutAssignedToInput[]
    createMany?: TaskCreateManyAssignedToInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TravelIdeaCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TravelIdeaCreateWithoutCreatorInput, TravelIdeaUncheckedCreateWithoutCreatorInput> | TravelIdeaCreateWithoutCreatorInput[] | TravelIdeaUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TravelIdeaCreateOrConnectWithoutCreatorInput | TravelIdeaCreateOrConnectWithoutCreatorInput[]
    createMany?: TravelIdeaCreateManyCreatorInputEnvelope
    connect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
  }

  export type ShoppingItemCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<ShoppingItemCreateWithoutAssignedToInput, ShoppingItemUncheckedCreateWithoutAssignedToInput> | ShoppingItemCreateWithoutAssignedToInput[] | ShoppingItemUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutAssignedToInput | ShoppingItemCreateOrConnectWithoutAssignedToInput[]
    createMany?: ShoppingItemCreateManyAssignedToInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type ShoppingItemCreateNestedManyWithoutAddedByInput = {
    create?: XOR<ShoppingItemCreateWithoutAddedByInput, ShoppingItemUncheckedCreateWithoutAddedByInput> | ShoppingItemCreateWithoutAddedByInput[] | ShoppingItemUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutAddedByInput | ShoppingItemCreateOrConnectWithoutAddedByInput[]
    createMany?: ShoppingItemCreateManyAddedByInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type RecipeCreateNestedManyWithoutCreatorInput = {
    create?: XOR<RecipeCreateWithoutCreatorInput, RecipeUncheckedCreateWithoutCreatorInput> | RecipeCreateWithoutCreatorInput[] | RecipeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutCreatorInput | RecipeCreateOrConnectWithoutCreatorInput[]
    createMany?: RecipeCreateManyCreatorInputEnvelope
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
  }

  export type CalendarEventUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CalendarEventCreateWithoutCreatorInput, CalendarEventUncheckedCreateWithoutCreatorInput> | CalendarEventCreateWithoutCreatorInput[] | CalendarEventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutCreatorInput | CalendarEventCreateOrConnectWithoutCreatorInput[]
    createMany?: CalendarEventCreateManyCreatorInputEnvelope
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<TaskCreateWithoutAssignedToInput, TaskUncheckedCreateWithoutAssignedToInput> | TaskCreateWithoutAssignedToInput[] | TaskUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssignedToInput | TaskCreateOrConnectWithoutAssignedToInput[]
    createMany?: TaskCreateManyAssignedToInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TravelIdeaUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TravelIdeaCreateWithoutCreatorInput, TravelIdeaUncheckedCreateWithoutCreatorInput> | TravelIdeaCreateWithoutCreatorInput[] | TravelIdeaUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TravelIdeaCreateOrConnectWithoutCreatorInput | TravelIdeaCreateOrConnectWithoutCreatorInput[]
    createMany?: TravelIdeaCreateManyCreatorInputEnvelope
    connect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
  }

  export type ShoppingItemUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<ShoppingItemCreateWithoutAssignedToInput, ShoppingItemUncheckedCreateWithoutAssignedToInput> | ShoppingItemCreateWithoutAssignedToInput[] | ShoppingItemUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutAssignedToInput | ShoppingItemCreateOrConnectWithoutAssignedToInput[]
    createMany?: ShoppingItemCreateManyAssignedToInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type ShoppingItemUncheckedCreateNestedManyWithoutAddedByInput = {
    create?: XOR<ShoppingItemCreateWithoutAddedByInput, ShoppingItemUncheckedCreateWithoutAddedByInput> | ShoppingItemCreateWithoutAddedByInput[] | ShoppingItemUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutAddedByInput | ShoppingItemCreateOrConnectWithoutAddedByInput[]
    createMany?: ShoppingItemCreateManyAddedByInputEnvelope
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
  }

  export type RecipeUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<RecipeCreateWithoutCreatorInput, RecipeUncheckedCreateWithoutCreatorInput> | RecipeCreateWithoutCreatorInput[] | RecipeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutCreatorInput | RecipeCreateOrConnectWithoutCreatorInput[]
    createMany?: RecipeCreateManyCreatorInputEnvelope
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FoyerUpdateOneWithoutMembersNestedInput = {
    create?: XOR<FoyerCreateWithoutMembersInput, FoyerUncheckedCreateWithoutMembersInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutMembersInput
    upsert?: FoyerUpsertWithoutMembersInput
    disconnect?: FoyerWhereInput | boolean
    delete?: FoyerWhereInput | boolean
    connect?: FoyerWhereUniqueInput
    update?: XOR<XOR<FoyerUpdateToOneWithWhereWithoutMembersInput, FoyerUpdateWithoutMembersInput>, FoyerUncheckedUpdateWithoutMembersInput>
  }

  export type CalendarEventUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CalendarEventCreateWithoutCreatorInput, CalendarEventUncheckedCreateWithoutCreatorInput> | CalendarEventCreateWithoutCreatorInput[] | CalendarEventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutCreatorInput | CalendarEventCreateOrConnectWithoutCreatorInput[]
    upsert?: CalendarEventUpsertWithWhereUniqueWithoutCreatorInput | CalendarEventUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CalendarEventCreateManyCreatorInputEnvelope
    set?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    disconnect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    delete?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    update?: CalendarEventUpdateWithWhereUniqueWithoutCreatorInput | CalendarEventUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CalendarEventUpdateManyWithWhereWithoutCreatorInput | CalendarEventUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<TaskCreateWithoutAssignedToInput, TaskUncheckedCreateWithoutAssignedToInput> | TaskCreateWithoutAssignedToInput[] | TaskUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssignedToInput | TaskCreateOrConnectWithoutAssignedToInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssignedToInput | TaskUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: TaskCreateManyAssignedToInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssignedToInput | TaskUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssignedToInput | TaskUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TravelIdeaUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TravelIdeaCreateWithoutCreatorInput, TravelIdeaUncheckedCreateWithoutCreatorInput> | TravelIdeaCreateWithoutCreatorInput[] | TravelIdeaUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TravelIdeaCreateOrConnectWithoutCreatorInput | TravelIdeaCreateOrConnectWithoutCreatorInput[]
    upsert?: TravelIdeaUpsertWithWhereUniqueWithoutCreatorInput | TravelIdeaUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TravelIdeaCreateManyCreatorInputEnvelope
    set?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    disconnect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    delete?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    connect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    update?: TravelIdeaUpdateWithWhereUniqueWithoutCreatorInput | TravelIdeaUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TravelIdeaUpdateManyWithWhereWithoutCreatorInput | TravelIdeaUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TravelIdeaScalarWhereInput | TravelIdeaScalarWhereInput[]
  }

  export type ShoppingItemUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutAssignedToInput, ShoppingItemUncheckedCreateWithoutAssignedToInput> | ShoppingItemCreateWithoutAssignedToInput[] | ShoppingItemUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutAssignedToInput | ShoppingItemCreateOrConnectWithoutAssignedToInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutAssignedToInput | ShoppingItemUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: ShoppingItemCreateManyAssignedToInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutAssignedToInput | ShoppingItemUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutAssignedToInput | ShoppingItemUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type ShoppingItemUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutAddedByInput, ShoppingItemUncheckedCreateWithoutAddedByInput> | ShoppingItemCreateWithoutAddedByInput[] | ShoppingItemUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutAddedByInput | ShoppingItemCreateOrConnectWithoutAddedByInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutAddedByInput | ShoppingItemUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: ShoppingItemCreateManyAddedByInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutAddedByInput | ShoppingItemUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutAddedByInput | ShoppingItemUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type RecipeUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<RecipeCreateWithoutCreatorInput, RecipeUncheckedCreateWithoutCreatorInput> | RecipeCreateWithoutCreatorInput[] | RecipeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutCreatorInput | RecipeCreateOrConnectWithoutCreatorInput[]
    upsert?: RecipeUpsertWithWhereUniqueWithoutCreatorInput | RecipeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: RecipeCreateManyCreatorInputEnvelope
    set?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    disconnect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    delete?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    update?: RecipeUpdateWithWhereUniqueWithoutCreatorInput | RecipeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: RecipeUpdateManyWithWhereWithoutCreatorInput | RecipeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
  }

  export type CalendarEventUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CalendarEventCreateWithoutCreatorInput, CalendarEventUncheckedCreateWithoutCreatorInput> | CalendarEventCreateWithoutCreatorInput[] | CalendarEventUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CalendarEventCreateOrConnectWithoutCreatorInput | CalendarEventCreateOrConnectWithoutCreatorInput[]
    upsert?: CalendarEventUpsertWithWhereUniqueWithoutCreatorInput | CalendarEventUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CalendarEventCreateManyCreatorInputEnvelope
    set?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    disconnect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    delete?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    connect?: CalendarEventWhereUniqueInput | CalendarEventWhereUniqueInput[]
    update?: CalendarEventUpdateWithWhereUniqueWithoutCreatorInput | CalendarEventUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CalendarEventUpdateManyWithWhereWithoutCreatorInput | CalendarEventUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<TaskCreateWithoutAssignedToInput, TaskUncheckedCreateWithoutAssignedToInput> | TaskCreateWithoutAssignedToInput[] | TaskUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssignedToInput | TaskCreateOrConnectWithoutAssignedToInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssignedToInput | TaskUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: TaskCreateManyAssignedToInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssignedToInput | TaskUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssignedToInput | TaskUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TravelIdeaUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TravelIdeaCreateWithoutCreatorInput, TravelIdeaUncheckedCreateWithoutCreatorInput> | TravelIdeaCreateWithoutCreatorInput[] | TravelIdeaUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TravelIdeaCreateOrConnectWithoutCreatorInput | TravelIdeaCreateOrConnectWithoutCreatorInput[]
    upsert?: TravelIdeaUpsertWithWhereUniqueWithoutCreatorInput | TravelIdeaUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TravelIdeaCreateManyCreatorInputEnvelope
    set?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    disconnect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    delete?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    connect?: TravelIdeaWhereUniqueInput | TravelIdeaWhereUniqueInput[]
    update?: TravelIdeaUpdateWithWhereUniqueWithoutCreatorInput | TravelIdeaUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TravelIdeaUpdateManyWithWhereWithoutCreatorInput | TravelIdeaUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TravelIdeaScalarWhereInput | TravelIdeaScalarWhereInput[]
  }

  export type ShoppingItemUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutAssignedToInput, ShoppingItemUncheckedCreateWithoutAssignedToInput> | ShoppingItemCreateWithoutAssignedToInput[] | ShoppingItemUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutAssignedToInput | ShoppingItemCreateOrConnectWithoutAssignedToInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutAssignedToInput | ShoppingItemUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: ShoppingItemCreateManyAssignedToInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutAssignedToInput | ShoppingItemUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutAssignedToInput | ShoppingItemUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type ShoppingItemUncheckedUpdateManyWithoutAddedByNestedInput = {
    create?: XOR<ShoppingItemCreateWithoutAddedByInput, ShoppingItemUncheckedCreateWithoutAddedByInput> | ShoppingItemCreateWithoutAddedByInput[] | ShoppingItemUncheckedCreateWithoutAddedByInput[]
    connectOrCreate?: ShoppingItemCreateOrConnectWithoutAddedByInput | ShoppingItemCreateOrConnectWithoutAddedByInput[]
    upsert?: ShoppingItemUpsertWithWhereUniqueWithoutAddedByInput | ShoppingItemUpsertWithWhereUniqueWithoutAddedByInput[]
    createMany?: ShoppingItemCreateManyAddedByInputEnvelope
    set?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    disconnect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    delete?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    connect?: ShoppingItemWhereUniqueInput | ShoppingItemWhereUniqueInput[]
    update?: ShoppingItemUpdateWithWhereUniqueWithoutAddedByInput | ShoppingItemUpdateWithWhereUniqueWithoutAddedByInput[]
    updateMany?: ShoppingItemUpdateManyWithWhereWithoutAddedByInput | ShoppingItemUpdateManyWithWhereWithoutAddedByInput[]
    deleteMany?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
  }

  export type RecipeUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<RecipeCreateWithoutCreatorInput, RecipeUncheckedCreateWithoutCreatorInput> | RecipeCreateWithoutCreatorInput[] | RecipeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutCreatorInput | RecipeCreateOrConnectWithoutCreatorInput[]
    upsert?: RecipeUpsertWithWhereUniqueWithoutCreatorInput | RecipeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: RecipeCreateManyCreatorInputEnvelope
    set?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    disconnect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    delete?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    update?: RecipeUpdateWithWhereUniqueWithoutCreatorInput | RecipeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: RecipeUpdateManyWithWhereWithoutCreatorInput | RecipeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
  }

  export type FoyerCreateNestedOneWithoutTasksInput = {
    create?: XOR<FoyerCreateWithoutTasksInput, FoyerUncheckedCreateWithoutTasksInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutTasksInput
    connect?: FoyerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedTasksInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FoyerUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<FoyerCreateWithoutTasksInput, FoyerUncheckedCreateWithoutTasksInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutTasksInput
    upsert?: FoyerUpsertWithoutTasksInput
    connect?: FoyerWhereUniqueInput
    update?: XOR<XOR<FoyerUpdateToOneWithWhereWithoutTasksInput, FoyerUpdateWithoutTasksInput>, FoyerUncheckedUpdateWithoutTasksInput>
  }

  export type UserUpdateOneWithoutAssignedTasksNestedInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    upsert?: UserUpsertWithoutAssignedTasksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedTasksInput, UserUpdateWithoutAssignedTasksInput>, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type FoyerCreateNestedOneWithoutCalendarEventsInput = {
    create?: XOR<FoyerCreateWithoutCalendarEventsInput, FoyerUncheckedCreateWithoutCalendarEventsInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutCalendarEventsInput
    connect?: FoyerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedEventsInput = {
    create?: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEventsInput
    connect?: UserWhereUniqueInput
  }

  export type FoyerUpdateOneRequiredWithoutCalendarEventsNestedInput = {
    create?: XOR<FoyerCreateWithoutCalendarEventsInput, FoyerUncheckedCreateWithoutCalendarEventsInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutCalendarEventsInput
    upsert?: FoyerUpsertWithoutCalendarEventsInput
    connect?: FoyerWhereUniqueInput
    update?: XOR<XOR<FoyerUpdateToOneWithWhereWithoutCalendarEventsInput, FoyerUpdateWithoutCalendarEventsInput>, FoyerUncheckedUpdateWithoutCalendarEventsInput>
  }

  export type UserUpdateOneWithoutCreatedEventsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEventsInput
    upsert?: UserUpsertWithoutCreatedEventsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedEventsInput, UserUpdateWithoutCreatedEventsInput>, UserUncheckedUpdateWithoutCreatedEventsInput>
  }

  export type FoyerCreateNestedOneWithoutShoppingItemsInput = {
    create?: XOR<FoyerCreateWithoutShoppingItemsInput, FoyerUncheckedCreateWithoutShoppingItemsInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutShoppingItemsInput
    connect?: FoyerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedShoppingsInput = {
    create?: XOR<UserCreateWithoutAssignedShoppingsInput, UserUncheckedCreateWithoutAssignedShoppingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedShoppingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAddedShoppingsInput = {
    create?: XOR<UserCreateWithoutAddedShoppingsInput, UserUncheckedCreateWithoutAddedShoppingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddedShoppingsInput
    connect?: UserWhereUniqueInput
  }

  export type FoyerUpdateOneRequiredWithoutShoppingItemsNestedInput = {
    create?: XOR<FoyerCreateWithoutShoppingItemsInput, FoyerUncheckedCreateWithoutShoppingItemsInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutShoppingItemsInput
    upsert?: FoyerUpsertWithoutShoppingItemsInput
    connect?: FoyerWhereUniqueInput
    update?: XOR<XOR<FoyerUpdateToOneWithWhereWithoutShoppingItemsInput, FoyerUpdateWithoutShoppingItemsInput>, FoyerUncheckedUpdateWithoutShoppingItemsInput>
  }

  export type UserUpdateOneWithoutAssignedShoppingsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedShoppingsInput, UserUncheckedCreateWithoutAssignedShoppingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedShoppingsInput
    upsert?: UserUpsertWithoutAssignedShoppingsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedShoppingsInput, UserUpdateWithoutAssignedShoppingsInput>, UserUncheckedUpdateWithoutAssignedShoppingsInput>
  }

  export type UserUpdateOneWithoutAddedShoppingsNestedInput = {
    create?: XOR<UserCreateWithoutAddedShoppingsInput, UserUncheckedCreateWithoutAddedShoppingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddedShoppingsInput
    upsert?: UserUpsertWithoutAddedShoppingsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAddedShoppingsInput, UserUpdateWithoutAddedShoppingsInput>, UserUncheckedUpdateWithoutAddedShoppingsInput>
  }

  export type FoyerCreateNestedOneWithoutTravelIdeasInput = {
    create?: XOR<FoyerCreateWithoutTravelIdeasInput, FoyerUncheckedCreateWithoutTravelIdeasInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutTravelIdeasInput
    connect?: FoyerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedTravelIdeasInput = {
    create?: XOR<UserCreateWithoutCreatedTravelIdeasInput, UserUncheckedCreateWithoutCreatedTravelIdeasInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTravelIdeasInput
    connect?: UserWhereUniqueInput
  }

  export type FoyerUpdateOneRequiredWithoutTravelIdeasNestedInput = {
    create?: XOR<FoyerCreateWithoutTravelIdeasInput, FoyerUncheckedCreateWithoutTravelIdeasInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutTravelIdeasInput
    upsert?: FoyerUpsertWithoutTravelIdeasInput
    connect?: FoyerWhereUniqueInput
    update?: XOR<XOR<FoyerUpdateToOneWithWhereWithoutTravelIdeasInput, FoyerUpdateWithoutTravelIdeasInput>, FoyerUncheckedUpdateWithoutTravelIdeasInput>
  }

  export type UserUpdateOneWithoutCreatedTravelIdeasNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTravelIdeasInput, UserUncheckedCreateWithoutCreatedTravelIdeasInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTravelIdeasInput
    upsert?: UserUpsertWithoutCreatedTravelIdeasInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTravelIdeasInput, UserUpdateWithoutCreatedTravelIdeasInput>, UserUncheckedUpdateWithoutCreatedTravelIdeasInput>
  }

  export type FoyerCreateNestedOneWithoutRecipesInput = {
    create?: XOR<FoyerCreateWithoutRecipesInput, FoyerUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutRecipesInput
    connect?: FoyerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedRecipesInput = {
    create?: XOR<UserCreateWithoutCreatedRecipesInput, UserUncheckedCreateWithoutCreatedRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type FoyerUpdateOneRequiredWithoutRecipesNestedInput = {
    create?: XOR<FoyerCreateWithoutRecipesInput, FoyerUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: FoyerCreateOrConnectWithoutRecipesInput
    upsert?: FoyerUpsertWithoutRecipesInput
    connect?: FoyerWhereUniqueInput
    update?: XOR<XOR<FoyerUpdateToOneWithWhereWithoutRecipesInput, FoyerUpdateWithoutRecipesInput>, FoyerUncheckedUpdateWithoutRecipesInput>
  }

  export type UserUpdateOneWithoutCreatedRecipesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedRecipesInput, UserUncheckedCreateWithoutCreatedRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRecipesInput
    upsert?: UserUpsertWithoutCreatedRecipesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedRecipesInput, UserUpdateWithoutCreatedRecipesInput>, UserUncheckedUpdateWithoutCreatedRecipesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserCreateWithoutFoyerInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    createdEvents?: CalendarEventCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutFoyerInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    createdEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutFoyerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFoyerInput, UserUncheckedCreateWithoutFoyerInput>
  }

  export type UserCreateManyFoyerInputEnvelope = {
    data: UserCreateManyFoyerInput | UserCreateManyFoyerInput[]
    skipDuplicates?: boolean
  }

  export type CalendarEventCreateWithoutFoyerInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creator?: UserCreateNestedOneWithoutCreatedEventsInput
  }

  export type CalendarEventUncheckedCreateWithoutFoyerInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
  }

  export type CalendarEventCreateOrConnectWithoutFoyerInput = {
    where: CalendarEventWhereUniqueInput
    create: XOR<CalendarEventCreateWithoutFoyerInput, CalendarEventUncheckedCreateWithoutFoyerInput>
  }

  export type CalendarEventCreateManyFoyerInputEnvelope = {
    data: CalendarEventCreateManyFoyerInput | CalendarEventCreateManyFoyerInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutFoyerInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedTasksInput
  }

  export type TaskUncheckedCreateWithoutFoyerInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
  }

  export type TaskCreateOrConnectWithoutFoyerInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutFoyerInput, TaskUncheckedCreateWithoutFoyerInput>
  }

  export type TaskCreateManyFoyerInputEnvelope = {
    data: TaskCreateManyFoyerInput | TaskCreateManyFoyerInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingItemCreateWithoutFoyerInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedTo?: UserCreateNestedOneWithoutAssignedShoppingsInput
    addedBy?: UserCreateNestedOneWithoutAddedShoppingsInput
  }

  export type ShoppingItemUncheckedCreateWithoutFoyerInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    addedById?: string | null
  }

  export type ShoppingItemCreateOrConnectWithoutFoyerInput = {
    where: ShoppingItemWhereUniqueInput
    create: XOR<ShoppingItemCreateWithoutFoyerInput, ShoppingItemUncheckedCreateWithoutFoyerInput>
  }

  export type ShoppingItemCreateManyFoyerInputEnvelope = {
    data: ShoppingItemCreateManyFoyerInput | ShoppingItemCreateManyFoyerInput[]
    skipDuplicates?: boolean
  }

  export type TravelIdeaCreateWithoutFoyerInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    creator?: UserCreateNestedOneWithoutCreatedTravelIdeasInput
  }

  export type TravelIdeaUncheckedCreateWithoutFoyerInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    creatorId?: string | null
  }

  export type TravelIdeaCreateOrConnectWithoutFoyerInput = {
    where: TravelIdeaWhereUniqueInput
    create: XOR<TravelIdeaCreateWithoutFoyerInput, TravelIdeaUncheckedCreateWithoutFoyerInput>
  }

  export type TravelIdeaCreateManyFoyerInputEnvelope = {
    data: TravelIdeaCreateManyFoyerInput | TravelIdeaCreateManyFoyerInput[]
    skipDuplicates?: boolean
  }

  export type RecipeCreateWithoutFoyerInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    creator?: UserCreateNestedOneWithoutCreatedRecipesInput
  }

  export type RecipeUncheckedCreateWithoutFoyerInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    creatorId?: string | null
  }

  export type RecipeCreateOrConnectWithoutFoyerInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutFoyerInput, RecipeUncheckedCreateWithoutFoyerInput>
  }

  export type RecipeCreateManyFoyerInputEnvelope = {
    data: RecipeCreateManyFoyerInput | RecipeCreateManyFoyerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutFoyerInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFoyerInput, UserUncheckedUpdateWithoutFoyerInput>
    create: XOR<UserCreateWithoutFoyerInput, UserUncheckedCreateWithoutFoyerInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFoyerInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFoyerInput, UserUncheckedUpdateWithoutFoyerInput>
  }

  export type UserUpdateManyWithWhereWithoutFoyerInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFoyerInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    foyerId?: StringNullableFilter<"User"> | string | null
    acceptedFoyerRuleAt?: DateTimeNullableFilter<"User"> | Date | string | null
    points?: IntFilter<"User"> | number
    pushToken?: StringNullableFilter<"User"> | string | null
  }

  export type CalendarEventUpsertWithWhereUniqueWithoutFoyerInput = {
    where: CalendarEventWhereUniqueInput
    update: XOR<CalendarEventUpdateWithoutFoyerInput, CalendarEventUncheckedUpdateWithoutFoyerInput>
    create: XOR<CalendarEventCreateWithoutFoyerInput, CalendarEventUncheckedCreateWithoutFoyerInput>
  }

  export type CalendarEventUpdateWithWhereUniqueWithoutFoyerInput = {
    where: CalendarEventWhereUniqueInput
    data: XOR<CalendarEventUpdateWithoutFoyerInput, CalendarEventUncheckedUpdateWithoutFoyerInput>
  }

  export type CalendarEventUpdateManyWithWhereWithoutFoyerInput = {
    where: CalendarEventScalarWhereInput
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyWithoutFoyerInput>
  }

  export type CalendarEventScalarWhereInput = {
    AND?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
    OR?: CalendarEventScalarWhereInput[]
    NOT?: CalendarEventScalarWhereInput | CalendarEventScalarWhereInput[]
    id?: StringFilter<"CalendarEvent"> | string
    title?: StringFilter<"CalendarEvent"> | string
    description?: StringNullableFilter<"CalendarEvent"> | string | null
    startDate?: DateTimeFilter<"CalendarEvent"> | Date | string
    endDate?: DateTimeFilter<"CalendarEvent"> | Date | string
    recurrence?: StringFilter<"CalendarEvent"> | string
    createdAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    updatedAt?: DateTimeFilter<"CalendarEvent"> | Date | string
    foyerId?: StringFilter<"CalendarEvent"> | string
    creatorId?: StringNullableFilter<"CalendarEvent"> | string | null
  }

  export type TaskUpsertWithWhereUniqueWithoutFoyerInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutFoyerInput, TaskUncheckedUpdateWithoutFoyerInput>
    create: XOR<TaskCreateWithoutFoyerInput, TaskUncheckedCreateWithoutFoyerInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutFoyerInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutFoyerInput, TaskUncheckedUpdateWithoutFoyerInput>
  }

  export type TaskUpdateManyWithWhereWithoutFoyerInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutFoyerInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    completed?: BoolFilter<"Task"> | boolean
    points?: IntFilter<"Task"> | number
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    foyerId?: StringFilter<"Task"> | string
    assignedToId?: StringNullableFilter<"Task"> | string | null
  }

  export type ShoppingItemUpsertWithWhereUniqueWithoutFoyerInput = {
    where: ShoppingItemWhereUniqueInput
    update: XOR<ShoppingItemUpdateWithoutFoyerInput, ShoppingItemUncheckedUpdateWithoutFoyerInput>
    create: XOR<ShoppingItemCreateWithoutFoyerInput, ShoppingItemUncheckedCreateWithoutFoyerInput>
  }

  export type ShoppingItemUpdateWithWhereUniqueWithoutFoyerInput = {
    where: ShoppingItemWhereUniqueInput
    data: XOR<ShoppingItemUpdateWithoutFoyerInput, ShoppingItemUncheckedUpdateWithoutFoyerInput>
  }

  export type ShoppingItemUpdateManyWithWhereWithoutFoyerInput = {
    where: ShoppingItemScalarWhereInput
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyWithoutFoyerInput>
  }

  export type ShoppingItemScalarWhereInput = {
    AND?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
    OR?: ShoppingItemScalarWhereInput[]
    NOT?: ShoppingItemScalarWhereInput | ShoppingItemScalarWhereInput[]
    id?: StringFilter<"ShoppingItem"> | string
    name?: StringFilter<"ShoppingItem"> | string
    quantity?: StringNullableFilter<"ShoppingItem"> | string | null
    purchased?: BoolFilter<"ShoppingItem"> | boolean
    createdAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    updatedAt?: DateTimeFilter<"ShoppingItem"> | Date | string
    foyerId?: StringFilter<"ShoppingItem"> | string
    assignedToId?: StringNullableFilter<"ShoppingItem"> | string | null
    addedById?: StringNullableFilter<"ShoppingItem"> | string | null
  }

  export type TravelIdeaUpsertWithWhereUniqueWithoutFoyerInput = {
    where: TravelIdeaWhereUniqueInput
    update: XOR<TravelIdeaUpdateWithoutFoyerInput, TravelIdeaUncheckedUpdateWithoutFoyerInput>
    create: XOR<TravelIdeaCreateWithoutFoyerInput, TravelIdeaUncheckedCreateWithoutFoyerInput>
  }

  export type TravelIdeaUpdateWithWhereUniqueWithoutFoyerInput = {
    where: TravelIdeaWhereUniqueInput
    data: XOR<TravelIdeaUpdateWithoutFoyerInput, TravelIdeaUncheckedUpdateWithoutFoyerInput>
  }

  export type TravelIdeaUpdateManyWithWhereWithoutFoyerInput = {
    where: TravelIdeaScalarWhereInput
    data: XOR<TravelIdeaUpdateManyMutationInput, TravelIdeaUncheckedUpdateManyWithoutFoyerInput>
  }

  export type TravelIdeaScalarWhereInput = {
    AND?: TravelIdeaScalarWhereInput | TravelIdeaScalarWhereInput[]
    OR?: TravelIdeaScalarWhereInput[]
    NOT?: TravelIdeaScalarWhereInput | TravelIdeaScalarWhereInput[]
    id?: StringFilter<"TravelIdea"> | string
    title?: StringFilter<"TravelIdea"> | string
    description?: StringNullableFilter<"TravelIdea"> | string | null
    location?: StringNullableFilter<"TravelIdea"> | string | null
    createdAt?: DateTimeFilter<"TravelIdea"> | Date | string
    updatedAt?: DateTimeFilter<"TravelIdea"> | Date | string
    votes?: IntFilter<"TravelIdea"> | number
    foyerId?: StringFilter<"TravelIdea"> | string
    creatorId?: StringNullableFilter<"TravelIdea"> | string | null
  }

  export type RecipeUpsertWithWhereUniqueWithoutFoyerInput = {
    where: RecipeWhereUniqueInput
    update: XOR<RecipeUpdateWithoutFoyerInput, RecipeUncheckedUpdateWithoutFoyerInput>
    create: XOR<RecipeCreateWithoutFoyerInput, RecipeUncheckedCreateWithoutFoyerInput>
  }

  export type RecipeUpdateWithWhereUniqueWithoutFoyerInput = {
    where: RecipeWhereUniqueInput
    data: XOR<RecipeUpdateWithoutFoyerInput, RecipeUncheckedUpdateWithoutFoyerInput>
  }

  export type RecipeUpdateManyWithWhereWithoutFoyerInput = {
    where: RecipeScalarWhereInput
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyWithoutFoyerInput>
  }

  export type RecipeScalarWhereInput = {
    AND?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
    OR?: RecipeScalarWhereInput[]
    NOT?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
    id?: StringFilter<"Recipe"> | string
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    ingredients?: StringNullableFilter<"Recipe"> | string | null
    instructions?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    votes?: IntFilter<"Recipe"> | number
    foyerId?: StringFilter<"Recipe"> | string
    creatorId?: StringNullableFilter<"Recipe"> | string | null
  }

  export type FoyerCreateWithoutMembersInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    calendarEvents?: CalendarEventCreateNestedManyWithoutFoyerInput
    tasks?: TaskCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaCreateNestedManyWithoutFoyerInput
    recipes?: RecipeCreateNestedManyWithoutFoyerInput
  }

  export type FoyerUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutFoyerInput
    tasks?: TaskUncheckedCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutFoyerInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutFoyerInput
  }

  export type FoyerCreateOrConnectWithoutMembersInput = {
    where: FoyerWhereUniqueInput
    create: XOR<FoyerCreateWithoutMembersInput, FoyerUncheckedCreateWithoutMembersInput>
  }

  export type CalendarEventCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foyer: FoyerCreateNestedOneWithoutCalendarEventsInput
  }

  export type CalendarEventUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
  }

  export type CalendarEventCreateOrConnectWithoutCreatorInput = {
    where: CalendarEventWhereUniqueInput
    create: XOR<CalendarEventCreateWithoutCreatorInput, CalendarEventUncheckedCreateWithoutCreatorInput>
  }

  export type CalendarEventCreateManyCreatorInputEnvelope = {
    data: CalendarEventCreateManyCreatorInput | CalendarEventCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    foyer: FoyerCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
  }

  export type TaskCreateOrConnectWithoutAssignedToInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAssignedToInput, TaskUncheckedCreateWithoutAssignedToInput>
  }

  export type TaskCreateManyAssignedToInputEnvelope = {
    data: TaskCreateManyAssignedToInput | TaskCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type TravelIdeaCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyer: FoyerCreateNestedOneWithoutTravelIdeasInput
  }

  export type TravelIdeaUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyerId: string
  }

  export type TravelIdeaCreateOrConnectWithoutCreatorInput = {
    where: TravelIdeaWhereUniqueInput
    create: XOR<TravelIdeaCreateWithoutCreatorInput, TravelIdeaUncheckedCreateWithoutCreatorInput>
  }

  export type TravelIdeaCreateManyCreatorInputEnvelope = {
    data: TravelIdeaCreateManyCreatorInput | TravelIdeaCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingItemCreateWithoutAssignedToInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyer: FoyerCreateNestedOneWithoutShoppingItemsInput
    addedBy?: UserCreateNestedOneWithoutAddedShoppingsInput
  }

  export type ShoppingItemUncheckedCreateWithoutAssignedToInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    addedById?: string | null
  }

  export type ShoppingItemCreateOrConnectWithoutAssignedToInput = {
    where: ShoppingItemWhereUniqueInput
    create: XOR<ShoppingItemCreateWithoutAssignedToInput, ShoppingItemUncheckedCreateWithoutAssignedToInput>
  }

  export type ShoppingItemCreateManyAssignedToInputEnvelope = {
    data: ShoppingItemCreateManyAssignedToInput | ShoppingItemCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type ShoppingItemCreateWithoutAddedByInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyer: FoyerCreateNestedOneWithoutShoppingItemsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedShoppingsInput
  }

  export type ShoppingItemUncheckedCreateWithoutAddedByInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    assignedToId?: string | null
  }

  export type ShoppingItemCreateOrConnectWithoutAddedByInput = {
    where: ShoppingItemWhereUniqueInput
    create: XOR<ShoppingItemCreateWithoutAddedByInput, ShoppingItemUncheckedCreateWithoutAddedByInput>
  }

  export type ShoppingItemCreateManyAddedByInputEnvelope = {
    data: ShoppingItemCreateManyAddedByInput | ShoppingItemCreateManyAddedByInput[]
    skipDuplicates?: boolean
  }

  export type RecipeCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyer: FoyerCreateNestedOneWithoutRecipesInput
  }

  export type RecipeUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyerId: string
  }

  export type RecipeCreateOrConnectWithoutCreatorInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutCreatorInput, RecipeUncheckedCreateWithoutCreatorInput>
  }

  export type RecipeCreateManyCreatorInputEnvelope = {
    data: RecipeCreateManyCreatorInput | RecipeCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type FoyerUpsertWithoutMembersInput = {
    update: XOR<FoyerUpdateWithoutMembersInput, FoyerUncheckedUpdateWithoutMembersInput>
    create: XOR<FoyerCreateWithoutMembersInput, FoyerUncheckedCreateWithoutMembersInput>
    where?: FoyerWhereInput
  }

  export type FoyerUpdateToOneWithWhereWithoutMembersInput = {
    where?: FoyerWhereInput
    data: XOR<FoyerUpdateWithoutMembersInput, FoyerUncheckedUpdateWithoutMembersInput>
  }

  export type FoyerUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calendarEvents?: CalendarEventUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUpdateManyWithoutFoyerNestedInput
  }

  export type FoyerUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUncheckedUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutFoyerNestedInput
  }

  export type CalendarEventUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CalendarEventWhereUniqueInput
    update: XOR<CalendarEventUpdateWithoutCreatorInput, CalendarEventUncheckedUpdateWithoutCreatorInput>
    create: XOR<CalendarEventCreateWithoutCreatorInput, CalendarEventUncheckedCreateWithoutCreatorInput>
  }

  export type CalendarEventUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CalendarEventWhereUniqueInput
    data: XOR<CalendarEventUpdateWithoutCreatorInput, CalendarEventUncheckedUpdateWithoutCreatorInput>
  }

  export type CalendarEventUpdateManyWithWhereWithoutCreatorInput = {
    where: CalendarEventScalarWhereInput
    data: XOR<CalendarEventUpdateManyMutationInput, CalendarEventUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAssignedToInput, TaskUncheckedUpdateWithoutAssignedToInput>
    create: XOR<TaskCreateWithoutAssignedToInput, TaskUncheckedCreateWithoutAssignedToInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAssignedToInput, TaskUncheckedUpdateWithoutAssignedToInput>
  }

  export type TaskUpdateManyWithWhereWithoutAssignedToInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type TravelIdeaUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TravelIdeaWhereUniqueInput
    update: XOR<TravelIdeaUpdateWithoutCreatorInput, TravelIdeaUncheckedUpdateWithoutCreatorInput>
    create: XOR<TravelIdeaCreateWithoutCreatorInput, TravelIdeaUncheckedCreateWithoutCreatorInput>
  }

  export type TravelIdeaUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TravelIdeaWhereUniqueInput
    data: XOR<TravelIdeaUpdateWithoutCreatorInput, TravelIdeaUncheckedUpdateWithoutCreatorInput>
  }

  export type TravelIdeaUpdateManyWithWhereWithoutCreatorInput = {
    where: TravelIdeaScalarWhereInput
    data: XOR<TravelIdeaUpdateManyMutationInput, TravelIdeaUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ShoppingItemUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: ShoppingItemWhereUniqueInput
    update: XOR<ShoppingItemUpdateWithoutAssignedToInput, ShoppingItemUncheckedUpdateWithoutAssignedToInput>
    create: XOR<ShoppingItemCreateWithoutAssignedToInput, ShoppingItemUncheckedCreateWithoutAssignedToInput>
  }

  export type ShoppingItemUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: ShoppingItemWhereUniqueInput
    data: XOR<ShoppingItemUpdateWithoutAssignedToInput, ShoppingItemUncheckedUpdateWithoutAssignedToInput>
  }

  export type ShoppingItemUpdateManyWithWhereWithoutAssignedToInput = {
    where: ShoppingItemScalarWhereInput
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type ShoppingItemUpsertWithWhereUniqueWithoutAddedByInput = {
    where: ShoppingItemWhereUniqueInput
    update: XOR<ShoppingItemUpdateWithoutAddedByInput, ShoppingItemUncheckedUpdateWithoutAddedByInput>
    create: XOR<ShoppingItemCreateWithoutAddedByInput, ShoppingItemUncheckedCreateWithoutAddedByInput>
  }

  export type ShoppingItemUpdateWithWhereUniqueWithoutAddedByInput = {
    where: ShoppingItemWhereUniqueInput
    data: XOR<ShoppingItemUpdateWithoutAddedByInput, ShoppingItemUncheckedUpdateWithoutAddedByInput>
  }

  export type ShoppingItemUpdateManyWithWhereWithoutAddedByInput = {
    where: ShoppingItemScalarWhereInput
    data: XOR<ShoppingItemUpdateManyMutationInput, ShoppingItemUncheckedUpdateManyWithoutAddedByInput>
  }

  export type RecipeUpsertWithWhereUniqueWithoutCreatorInput = {
    where: RecipeWhereUniqueInput
    update: XOR<RecipeUpdateWithoutCreatorInput, RecipeUncheckedUpdateWithoutCreatorInput>
    create: XOR<RecipeCreateWithoutCreatorInput, RecipeUncheckedCreateWithoutCreatorInput>
  }

  export type RecipeUpdateWithWhereUniqueWithoutCreatorInput = {
    where: RecipeWhereUniqueInput
    data: XOR<RecipeUpdateWithoutCreatorInput, RecipeUncheckedUpdateWithoutCreatorInput>
  }

  export type RecipeUpdateManyWithWhereWithoutCreatorInput = {
    where: RecipeScalarWhereInput
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyWithoutCreatorInput>
  }

  export type FoyerCreateWithoutTasksInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaCreateNestedManyWithoutFoyerInput
    recipes?: RecipeCreateNestedManyWithoutFoyerInput
  }

  export type FoyerUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutFoyerInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutFoyerInput
  }

  export type FoyerCreateOrConnectWithoutTasksInput = {
    where: FoyerWhereUniqueInput
    create: XOR<FoyerCreateWithoutTasksInput, FoyerUncheckedCreateWithoutTasksInput>
  }

  export type UserCreateWithoutAssignedTasksInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    foyer?: FoyerCreateNestedOneWithoutMembersInput
    createdEvents?: CalendarEventCreateNestedManyWithoutCreatorInput
    createdTravelIdeas?: TravelIdeaCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAssignedTasksInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId?: string | null
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    createdEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatorInput
    createdTravelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAssignedTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
  }

  export type FoyerUpsertWithoutTasksInput = {
    update: XOR<FoyerUpdateWithoutTasksInput, FoyerUncheckedUpdateWithoutTasksInput>
    create: XOR<FoyerCreateWithoutTasksInput, FoyerUncheckedCreateWithoutTasksInput>
    where?: FoyerWhereInput
  }

  export type FoyerUpdateToOneWithWhereWithoutTasksInput = {
    where?: FoyerWhereInput
    data: XOR<FoyerUpdateWithoutTasksInput, FoyerUncheckedUpdateWithoutTasksInput>
  }

  export type FoyerUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUpdateManyWithoutFoyerNestedInput
  }

  export type FoyerUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUncheckedUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutFoyerNestedInput
  }

  export type UserUpsertWithoutAssignedTasksInput = {
    update: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type UserUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    foyer?: FoyerUpdateOneWithoutMembersNestedInput
    createdEvents?: CalendarEventUpdateManyWithoutCreatorNestedInput
    createdTravelIdeas?: TravelIdeaUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdEvents?: CalendarEventUncheckedUpdateManyWithoutCreatorNestedInput
    createdTravelIdeas?: TravelIdeaUncheckedUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type FoyerCreateWithoutCalendarEventsInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutFoyerInput
    tasks?: TaskCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaCreateNestedManyWithoutFoyerInput
    recipes?: RecipeCreateNestedManyWithoutFoyerInput
  }

  export type FoyerUncheckedCreateWithoutCalendarEventsInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutFoyerInput
    tasks?: TaskUncheckedCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutFoyerInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutFoyerInput
  }

  export type FoyerCreateOrConnectWithoutCalendarEventsInput = {
    where: FoyerWhereUniqueInput
    create: XOR<FoyerCreateWithoutCalendarEventsInput, FoyerUncheckedCreateWithoutCalendarEventsInput>
  }

  export type UserCreateWithoutCreatedEventsInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    foyer?: FoyerCreateNestedOneWithoutMembersInput
    assignedTasks?: TaskCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedEventsInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId?: string | null
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
  }

  export type FoyerUpsertWithoutCalendarEventsInput = {
    update: XOR<FoyerUpdateWithoutCalendarEventsInput, FoyerUncheckedUpdateWithoutCalendarEventsInput>
    create: XOR<FoyerCreateWithoutCalendarEventsInput, FoyerUncheckedCreateWithoutCalendarEventsInput>
    where?: FoyerWhereInput
  }

  export type FoyerUpdateToOneWithWhereWithoutCalendarEventsInput = {
    where?: FoyerWhereInput
    data: XOR<FoyerUpdateWithoutCalendarEventsInput, FoyerUncheckedUpdateWithoutCalendarEventsInput>
  }

  export type FoyerUpdateWithoutCalendarEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUpdateManyWithoutFoyerNestedInput
  }

  export type FoyerUncheckedUpdateWithoutCalendarEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUncheckedUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutFoyerNestedInput
  }

  export type UserUpsertWithoutCreatedEventsInput = {
    update: XOR<UserUpdateWithoutCreatedEventsInput, UserUncheckedUpdateWithoutCreatedEventsInput>
    create: XOR<UserCreateWithoutCreatedEventsInput, UserUncheckedCreateWithoutCreatedEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedEventsInput, UserUncheckedUpdateWithoutCreatedEventsInput>
  }

  export type UserUpdateWithoutCreatedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    foyer?: FoyerUpdateOneWithoutMembersNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUncheckedUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type FoyerCreateWithoutShoppingItemsInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutFoyerInput
    tasks?: TaskCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaCreateNestedManyWithoutFoyerInput
    recipes?: RecipeCreateNestedManyWithoutFoyerInput
  }

  export type FoyerUncheckedCreateWithoutShoppingItemsInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutFoyerInput
    tasks?: TaskUncheckedCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutFoyerInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutFoyerInput
  }

  export type FoyerCreateOrConnectWithoutShoppingItemsInput = {
    where: FoyerWhereUniqueInput
    create: XOR<FoyerCreateWithoutShoppingItemsInput, FoyerUncheckedCreateWithoutShoppingItemsInput>
  }

  export type UserCreateWithoutAssignedShoppingsInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    foyer?: FoyerCreateNestedOneWithoutMembersInput
    createdEvents?: CalendarEventCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaCreateNestedManyWithoutCreatorInput
    addedShoppings?: ShoppingItemCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAssignedShoppingsInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId?: string | null
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    createdEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutCreatorInput
    addedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAssignedShoppingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedShoppingsInput, UserUncheckedCreateWithoutAssignedShoppingsInput>
  }

  export type UserCreateWithoutAddedShoppingsInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    foyer?: FoyerCreateNestedOneWithoutMembersInput
    createdEvents?: CalendarEventCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemCreateNestedManyWithoutAssignedToInput
    createdRecipes?: RecipeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAddedShoppingsInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId?: string | null
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    createdEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAssignedToInput
    createdRecipes?: RecipeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAddedShoppingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddedShoppingsInput, UserUncheckedCreateWithoutAddedShoppingsInput>
  }

  export type FoyerUpsertWithoutShoppingItemsInput = {
    update: XOR<FoyerUpdateWithoutShoppingItemsInput, FoyerUncheckedUpdateWithoutShoppingItemsInput>
    create: XOR<FoyerCreateWithoutShoppingItemsInput, FoyerUncheckedCreateWithoutShoppingItemsInput>
    where?: FoyerWhereInput
  }

  export type FoyerUpdateToOneWithWhereWithoutShoppingItemsInput = {
    where?: FoyerWhereInput
    data: XOR<FoyerUpdateWithoutShoppingItemsInput, FoyerUncheckedUpdateWithoutShoppingItemsInput>
  }

  export type FoyerUpdateWithoutShoppingItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUpdateManyWithoutFoyerNestedInput
  }

  export type FoyerUncheckedUpdateWithoutShoppingItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUncheckedUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutFoyerNestedInput
  }

  export type UserUpsertWithoutAssignedShoppingsInput = {
    update: XOR<UserUpdateWithoutAssignedShoppingsInput, UserUncheckedUpdateWithoutAssignedShoppingsInput>
    create: XOR<UserCreateWithoutAssignedShoppingsInput, UserUncheckedCreateWithoutAssignedShoppingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedShoppingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedShoppingsInput, UserUncheckedUpdateWithoutAssignedShoppingsInput>
  }

  export type UserUpdateWithoutAssignedShoppingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    foyer?: FoyerUpdateOneWithoutMembersNestedInput
    createdEvents?: CalendarEventUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUpdateManyWithoutCreatorNestedInput
    addedShoppings?: ShoppingItemUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedShoppingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdEvents?: CalendarEventUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUncheckedUpdateManyWithoutCreatorNestedInput
    addedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserUpsertWithoutAddedShoppingsInput = {
    update: XOR<UserUpdateWithoutAddedShoppingsInput, UserUncheckedUpdateWithoutAddedShoppingsInput>
    create: XOR<UserCreateWithoutAddedShoppingsInput, UserUncheckedCreateWithoutAddedShoppingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAddedShoppingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAddedShoppingsInput, UserUncheckedUpdateWithoutAddedShoppingsInput>
  }

  export type UserUpdateWithoutAddedShoppingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    foyer?: FoyerUpdateOneWithoutMembersNestedInput
    createdEvents?: CalendarEventUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUpdateManyWithoutAssignedToNestedInput
    createdRecipes?: RecipeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAddedShoppingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdEvents?: CalendarEventUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUncheckedUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAssignedToNestedInput
    createdRecipes?: RecipeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type FoyerCreateWithoutTravelIdeasInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutFoyerInput
    tasks?: TaskCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemCreateNestedManyWithoutFoyerInput
    recipes?: RecipeCreateNestedManyWithoutFoyerInput
  }

  export type FoyerUncheckedCreateWithoutTravelIdeasInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutFoyerInput
    tasks?: TaskUncheckedCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutFoyerInput
    recipes?: RecipeUncheckedCreateNestedManyWithoutFoyerInput
  }

  export type FoyerCreateOrConnectWithoutTravelIdeasInput = {
    where: FoyerWhereUniqueInput
    create: XOR<FoyerCreateWithoutTravelIdeasInput, FoyerUncheckedCreateWithoutTravelIdeasInput>
  }

  export type UserCreateWithoutCreatedTravelIdeasInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    foyer?: FoyerCreateNestedOneWithoutMembersInput
    createdEvents?: CalendarEventCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssignedToInput
    assignedShoppings?: ShoppingItemCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedTravelIdeasInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId?: string | null
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    createdEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssignedToInput
    assignedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAddedByInput
    createdRecipes?: RecipeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedTravelIdeasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTravelIdeasInput, UserUncheckedCreateWithoutCreatedTravelIdeasInput>
  }

  export type FoyerUpsertWithoutTravelIdeasInput = {
    update: XOR<FoyerUpdateWithoutTravelIdeasInput, FoyerUncheckedUpdateWithoutTravelIdeasInput>
    create: XOR<FoyerCreateWithoutTravelIdeasInput, FoyerUncheckedCreateWithoutTravelIdeasInput>
    where?: FoyerWhereInput
  }

  export type FoyerUpdateToOneWithWhereWithoutTravelIdeasInput = {
    where?: FoyerWhereInput
    data: XOR<FoyerUpdateWithoutTravelIdeasInput, FoyerUncheckedUpdateWithoutTravelIdeasInput>
  }

  export type FoyerUpdateWithoutTravelIdeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUpdateManyWithoutFoyerNestedInput
  }

  export type FoyerUncheckedUpdateWithoutTravelIdeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutFoyerNestedInput
    recipes?: RecipeUncheckedUpdateManyWithoutFoyerNestedInput
  }

  export type UserUpsertWithoutCreatedTravelIdeasInput = {
    update: XOR<UserUpdateWithoutCreatedTravelIdeasInput, UserUncheckedUpdateWithoutCreatedTravelIdeasInput>
    create: XOR<UserCreateWithoutCreatedTravelIdeasInput, UserUncheckedCreateWithoutCreatedTravelIdeasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTravelIdeasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTravelIdeasInput, UserUncheckedUpdateWithoutCreatedTravelIdeasInput>
  }

  export type UserUpdateWithoutCreatedTravelIdeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    foyer?: FoyerUpdateOneWithoutMembersNestedInput
    createdEvents?: CalendarEventUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssignedToNestedInput
    assignedShoppings?: ShoppingItemUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTravelIdeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdEvents?: CalendarEventUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssignedToNestedInput
    assignedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type FoyerCreateWithoutRecipesInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventCreateNestedManyWithoutFoyerInput
    tasks?: TaskCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaCreateNestedManyWithoutFoyerInput
  }

  export type FoyerUncheckedCreateWithoutRecipesInput = {
    id?: string
    name: string
    code: string
    rule: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutFoyerInput
    calendarEvents?: CalendarEventUncheckedCreateNestedManyWithoutFoyerInput
    tasks?: TaskUncheckedCreateNestedManyWithoutFoyerInput
    shoppingItems?: ShoppingItemUncheckedCreateNestedManyWithoutFoyerInput
    travelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutFoyerInput
  }

  export type FoyerCreateOrConnectWithoutRecipesInput = {
    where: FoyerWhereUniqueInput
    create: XOR<FoyerCreateWithoutRecipesInput, FoyerUncheckedCreateWithoutRecipesInput>
  }

  export type UserCreateWithoutCreatedRecipesInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    foyer?: FoyerCreateNestedOneWithoutMembersInput
    createdEvents?: CalendarEventCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemCreateNestedManyWithoutAddedByInput
  }

  export type UserUncheckedCreateWithoutCreatedRecipesInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId?: string | null
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
    createdEvents?: CalendarEventUncheckedCreateNestedManyWithoutCreatorInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssignedToInput
    createdTravelIdeas?: TravelIdeaUncheckedCreateNestedManyWithoutCreatorInput
    assignedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAssignedToInput
    addedShoppings?: ShoppingItemUncheckedCreateNestedManyWithoutAddedByInput
  }

  export type UserCreateOrConnectWithoutCreatedRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedRecipesInput, UserUncheckedCreateWithoutCreatedRecipesInput>
  }

  export type FoyerUpsertWithoutRecipesInput = {
    update: XOR<FoyerUpdateWithoutRecipesInput, FoyerUncheckedUpdateWithoutRecipesInput>
    create: XOR<FoyerCreateWithoutRecipesInput, FoyerUncheckedCreateWithoutRecipesInput>
    where?: FoyerWhereInput
  }

  export type FoyerUpdateToOneWithWhereWithoutRecipesInput = {
    where?: FoyerWhereInput
    data: XOR<FoyerUpdateWithoutRecipesInput, FoyerUncheckedUpdateWithoutRecipesInput>
  }

  export type FoyerUpdateWithoutRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUpdateManyWithoutFoyerNestedInput
  }

  export type FoyerUncheckedUpdateWithoutRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    rule?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutFoyerNestedInput
    calendarEvents?: CalendarEventUncheckedUpdateManyWithoutFoyerNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutFoyerNestedInput
    shoppingItems?: ShoppingItemUncheckedUpdateManyWithoutFoyerNestedInput
    travelIdeas?: TravelIdeaUncheckedUpdateManyWithoutFoyerNestedInput
  }

  export type UserUpsertWithoutCreatedRecipesInput = {
    update: XOR<UserUpdateWithoutCreatedRecipesInput, UserUncheckedUpdateWithoutCreatedRecipesInput>
    create: XOR<UserCreateWithoutCreatedRecipesInput, UserUncheckedCreateWithoutCreatedRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedRecipesInput, UserUncheckedUpdateWithoutCreatedRecipesInput>
  }

  export type UserUpdateWithoutCreatedRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    foyer?: FoyerUpdateOneWithoutMembersNestedInput
    createdEvents?: CalendarEventUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUpdateManyWithoutAddedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: NullableStringFieldUpdateOperationsInput | string | null
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdEvents?: CalendarEventUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUncheckedUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAddedByNestedInput
  }

  export type UserCreateManyFoyerInput = {
    id?: string
    name: string
    email: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    acceptedFoyerRuleAt?: Date | string | null
    points?: number
    pushToken?: string | null
  }

  export type CalendarEventCreateManyFoyerInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    creatorId?: string | null
  }

  export type TaskCreateManyFoyerInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
  }

  export type ShoppingItemCreateManyFoyerInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedToId?: string | null
    addedById?: string | null
  }

  export type TravelIdeaCreateManyFoyerInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    creatorId?: string | null
  }

  export type RecipeCreateManyFoyerInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    creatorId?: string | null
  }

  export type UserUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdEvents?: CalendarEventUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdEvents?: CalendarEventUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssignedToNestedInput
    createdTravelIdeas?: TravelIdeaUncheckedUpdateManyWithoutCreatorNestedInput
    assignedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAssignedToNestedInput
    addedShoppings?: ShoppingItemUncheckedUpdateManyWithoutAddedByNestedInput
    createdRecipes?: RecipeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedFoyerRuleAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    points?: IntFieldUpdateOperationsInput | number
    pushToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneWithoutCreatedEventsNestedInput
  }

  export type CalendarEventUncheckedUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventUncheckedUpdateManyWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUncheckedUpdateManyWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingItemUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedTo?: UserUpdateOneWithoutAssignedShoppingsNestedInput
    addedBy?: UserUpdateOneWithoutAddedShoppingsNestedInput
  }

  export type ShoppingItemUncheckedUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingItemUncheckedUpdateManyWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TravelIdeaUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    creator?: UserUpdateOneWithoutCreatedTravelIdeasNestedInput
  }

  export type TravelIdeaUncheckedUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TravelIdeaUncheckedUpdateManyWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    creator?: UserUpdateOneWithoutCreatedRecipesNestedInput
  }

  export type RecipeUncheckedUpdateWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeUncheckedUpdateManyWithoutFoyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    creatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CalendarEventCreateManyCreatorInput = {
    id?: string
    title: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    recurrence?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
  }

  export type TaskCreateManyAssignedToInput = {
    id?: string
    title: string
    description?: string | null
    completed?: boolean
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
  }

  export type TravelIdeaCreateManyCreatorInput = {
    id?: string
    title: string
    description?: string | null
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyerId: string
  }

  export type ShoppingItemCreateManyAssignedToInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    addedById?: string | null
  }

  export type ShoppingItemCreateManyAddedByInput = {
    id?: string
    name: string
    quantity?: string | null
    purchased?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    foyerId: string
    assignedToId?: string | null
  }

  export type RecipeCreateManyCreatorInput = {
    id?: string
    title: string
    description?: string | null
    ingredients?: string | null
    instructions?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    votes?: number
    foyerId: string
  }

  export type CalendarEventUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyer?: FoyerUpdateOneRequiredWithoutCalendarEventsNestedInput
  }

  export type CalendarEventUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
  }

  export type CalendarEventUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recurrence?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyer?: FoyerUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    completed?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
  }

  export type TravelIdeaUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyer?: FoyerUpdateOneRequiredWithoutTravelIdeasNestedInput
  }

  export type TravelIdeaUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyerId?: StringFieldUpdateOperationsInput | string
  }

  export type TravelIdeaUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyerId?: StringFieldUpdateOperationsInput | string
  }

  export type ShoppingItemUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyer?: FoyerUpdateOneRequiredWithoutShoppingItemsNestedInput
    addedBy?: UserUpdateOneWithoutAddedShoppingsNestedInput
  }

  export type ShoppingItemUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingItemUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    addedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingItemUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyer?: FoyerUpdateOneRequiredWithoutShoppingItemsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedShoppingsNestedInput
  }

  export type ShoppingItemUncheckedUpdateWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShoppingItemUncheckedUpdateManyWithoutAddedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: NullableStringFieldUpdateOperationsInput | string | null
    purchased?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    foyerId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyer?: FoyerUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type RecipeUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyerId?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: IntFieldUpdateOperationsInput | number
    foyerId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}