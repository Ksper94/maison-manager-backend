datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Foyer {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  rule      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members        User[]
  calendarEvents CalendarEvent[]
  tasks          Task[]
  shoppingItems  ShoppingItem[]
  travelIdeas    TravelIdea[]
  recipes        Recipe[]
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  foyerId String?
  foyer   Foyer?  @relation(fields: [foyerId], references: [id])

  acceptedFoyerRuleAt DateTime?

  createdEvents      CalendarEvent[] @relation("UserCreatorRelation")
  assignedTasks      Task[]          @relation("UserAssignedTasks")
  createdTravelIdeas TravelIdea[]    @relation("TravelCreatorRelation")
  assignedShoppings  ShoppingItem[]  @relation("UserAssignedShopping")
  addedShoppings     ShoppingItem[]  @relation("UserAddedShopping")
  points             Int             @default(0)

  createdRecipes Recipe[] @relation("RecipeCreatorRelation")
  pushToken      String? // Token pour Expo Push Notifications
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  points      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foyerId String
  foyer   Foyer  @relation(fields: [foyerId], references: [id])

  assignedToId String?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id], name: "UserAssignedTasks")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  recurrence  String   @default("none") // Valeurs possibles : "none", "daily", "weekly", "monthly", "yearly"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foyerId String
  foyer   Foyer  @relation(fields: [foyerId], references: [id])

  creatorId String?
  creator   User?   @relation("UserCreatorRelation", fields: [creatorId], references: [id])
}

model ShoppingItem {
  id        String   @id @default(cuid())
  name      String
  quantity  String?
  purchased Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  foyerId String
  foyer   Foyer  @relation(fields: [foyerId], references: [id])

  assignedToId String?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id], name: "UserAssignedShopping")

  addedById String?
  addedBy   User?   @relation(fields: [addedById], references: [id], name: "UserAddedShopping")
}

model TravelIdea {
  id          String   @id @default(cuid())
  title       String
  description String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  votes       Int      @default(0)

  foyerId String
  foyer   Foyer  @relation(fields: [foyerId], references: [id])

  creatorId String?
  creator   User?   @relation(fields: [creatorId], references: [id], name: "TravelCreatorRelation")
}

model Recipe {
  id           String   @id @default(cuid())
  title        String
  description  String?
  ingredients  String?
  instructions String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  votes        Int      @default(0)

  foyerId String
  foyer   Foyer  @relation(fields: [foyerId], references: [id])

  creatorId String?
  creator   User?   @relation(fields: [creatorId], references: [id], name: "RecipeCreatorRelation")
}
