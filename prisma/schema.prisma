datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Foyer {
  id             String   @id @default(cuid())
  name           String
  code           String   @unique // Code unique pour rejoindre un foyer
  rule           String   // Règle ou description du foyer
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  members        UserFoyer[]      // Membres du foyer (relation many-to-many via UserFoyer)
  calendarEvents CalendarEvent[]  // Événements du calendrier associés au foyer
  tasks          Task[]           // Tâches associées au foyer
  shoppingItems  ShoppingItem[]   // Articles de la liste de courses associés au foyer
  travelIdeas    TravelIdea[]     // Idées de voyage associées au foyer
  recipes        Recipe[]         // Recettes associées au foyer
}

model User {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  password            String
  avatar              String?  // URL ou chemin de l'avatar (facultatif)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  foyers              UserFoyer[]      // Foyers auxquels l'utilisateur appartient
  acceptedFoyerRuleAt DateTime?        // Date d'acceptation des règles du foyer (facultatif)

  createdEvents       CalendarEvent[]  @relation("UserCreatorRelation") // Événements créés par l'utilisateur
  assignedTasks       Task[]           @relation("UserAssignedTasks")   // Tâches assignées à l'utilisateur
  createdTravelIdeas  TravelIdea[]     @relation("TravelCreatorRelation") // Idées de voyage créées
  assignedShoppings   ShoppingItem[]   @relation("UserAssignedShopping") // Articles de courses assignés
  addedShoppings      ShoppingItem[]   @relation("UserAddedShopping")   // Articles ajoutés par l'utilisateur
  points              Int              @default(0)                      // Points accumulés par l'utilisateur
  createdRecipes      Recipe[]         @relation("RecipeCreatorRelation") // Recettes créées
  pushToken           String?          // Token pour notifications push (facultatif)
  travelVotes         TravelIdeaVote[] // Votes de l'utilisateur pour les idées de voyage
}

// Table pivot pour la relation many-to-many entre User et Foyer
model UserFoyer {
  id      String @id @default(cuid())
  userId  String
  foyerId String
  user    User   @relation(fields: [userId], references: [id])
  foyer   Foyer  @relation(fields: [foyerId], references: [id])

  @@unique([userId, foyerId]) // Un utilisateur ne peut rejoindre un foyer qu'une seule fois
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  // Description facultative de la tâche
  completed   Boolean  @default(false)
  completedAt DateTime? // Date de complétion (facultatif)
  points      Int      @default(0) // Points attribués pour la tâche
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foyerId     String
  foyer       Foyer    @relation(fields: [foyerId], references: [id])

  assignedToId String?
  assignedTo   User?    @relation(fields: [assignedToId], references: [id], name: "UserAssignedTasks")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  title       String
  description String?  // Description facultative de l'événement
  startDate   DateTime // Date de début
  endDate     DateTime // Date de fin
  recurrence  String   @default("none") // Type de récurrence : "none", "daily", "weekly", "monthly", "yearly"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foyerId     String
  foyer       Foyer    @relation(fields: [foyerId], references: [id])

  creatorId   String?
  creator     User?    @relation("UserCreatorRelation", fields: [creatorId], references: [id])
}

model ShoppingItem {
  id         String   @id @default(cuid())
  name       String
  quantity   String?  // Quantité (facultatif, peut être textuel comme "2kg")
  purchased  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  foyerId    String
  foyer      Foyer    @relation(fields: [foyerId], references: [id])

  assignedToId String?
  assignedTo   User?    @relation(fields: [assignedToId], references: [id], name: "UserAssignedShopping")

  addedById String?
  addedBy   User?    @relation(fields: [addedById], references: [id], name: "UserAddedShopping")
}

model TravelIdea {
  id          String   @id @default(cuid())
  title       String
  description String?  // Description facultative de l'idée de voyage
  location    String?  // Lieu ou destination (facultatif)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  votes       Int      @default(0) // Nombre total de votes reçus

  foyerId     String
  foyer       Foyer    @relation(fields: [foyerId], references: [id])

  creatorId   String?
  creator     User?    @relation(fields: [creatorId], references: [id], name: "TravelCreatorRelation")

  votesList   TravelIdeaVote[] // Liste des votes associés à cette idée
}

model Recipe {
  id           String   @id @default(cuid())
  title        String
  description  String?  // Description facultative de la recette
  ingredients  String?  // Liste des ingrédients (facultatif)
  instructions String?  // Instructions de préparation (facultatif)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  votes        Int      @default(0) // Nombre de votes reçus

  foyerId      String
  foyer        Foyer    @relation(fields: [foyerId], references: [id])

  creatorId    String?
  creator      User?    @relation(fields: [creatorId], references: [id], name: "RecipeCreatorRelation")
}

// Table pour enregistrer les votes individuels pour les idées de voyage
model TravelIdeaVote {
  id           String   @id @default(cuid())
  travelIdeaId String   // ID de l'idée de voyage votée
  userId       String   // ID de l'utilisateur qui a voté
  createdAt    DateTime @default(now()) // Date du vote

  travelIdea   TravelIdea @relation(fields: [travelIdeaId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([travelIdeaId, userId]) // Un utilisateur ne peut voter qu'une fois par idée
}